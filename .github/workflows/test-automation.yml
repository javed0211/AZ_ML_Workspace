name: Azure ML Test Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_category:
        description: 'Test category to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - UI
        - API
        - BDD
        - Smoke
      browser:
        description: 'Browser to use for UI tests'
        required: false
        default: 'chromium'
        type: choice
        options:
        - chromium
        - firefox
        - webkit
        - all
      environment:
        description: 'Environment to test against'
        required: false
        default: 'test'
        type: choice
        options:
        - test
        - staging
        - production

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chromium, firefox, webkit]
        exclude:
          # WebKit on Linux requires additional setup
          - os: ubuntu-latest
            browser: webkit
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore AzureMLWorkspace.Tests/
      
    - name: Build solution
      run: dotnet build AzureMLWorkspace.Tests/ --no-restore --configuration Release
      
    - name: Install Playwright browsers
      run: |
        dotnet run --project AzureMLWorkspace.Tests -- playwright install --with-deps ${{ matrix.browser }}
      
    - name: Run Unit Tests
      run: |
        dotnet test AzureMLWorkspace.Tests/ \
          --no-build \
          --configuration Release \
          --logger trx \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage" \
          --filter "Category!=UI&Category!=BDD" \
          --results-directory TestResults/Unit
      env:
        BROWSER_TYPE: ${{ matrix.browser }}
        HEADLESS_MODE: true
        
    - name: Run UI Tests
      if: github.event.inputs.test_category == 'all' || github.event.inputs.test_category == 'UI' || github.event.inputs.test_category == ''
      run: |
        dotnet test AzureMLWorkspace.Tests/ \
          --no-build \
          --configuration Release \
          --logger trx \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage" \
          --filter "Category=UI" \
          --results-directory TestResults/UI
      env:
        BROWSER_TYPE: ${{ matrix.browser }}
        HEADLESS_MODE: true
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        AZURE_WORKSPACE_NAME: ${{ secrets.AZURE_WORKSPACE_NAME }}
        
    - name: Run API Tests
      if: github.event.inputs.test_category == 'all' || github.event.inputs.test_category == 'API' || github.event.inputs.test_category == ''
      run: |
        dotnet test AzureMLWorkspace.Tests/ \
          --no-build \
          --configuration Release \
          --logger trx \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage" \
          --filter "Category=API" \
          --results-directory TestResults/API
      env:
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        AZURE_WORKSPACE_NAME: ${{ secrets.AZURE_WORKSPACE_NAME }}
        AZUREAISEARCH_SERVICENAME: ${{ secrets.AZUREAISEARCH_SERVICENAME }}
        AZUREAISEARCH_INDEXNAME: ${{ secrets.AZUREAISEARCH_INDEXNAME }}
        
    - name: Run BDD Tests
      if: github.event.inputs.test_category == 'all' || github.event.inputs.test_category == 'BDD' || github.event.inputs.test_category == ''
      run: |
        dotnet test AzureMLWorkspace.Tests/ \
          --no-build \
          --configuration Release \
          --logger trx \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage" \
          --filter "Category=BDD" \
          --results-directory TestResults/BDD
      env:
        BROWSER_TYPE: ${{ matrix.browser }}
        HEADLESS_MODE: true
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        AZURE_WORKSPACE_NAME: ${{ secrets.AZURE_WORKSPACE_NAME }}
        AZUREAISEARCH_SERVICENAME: ${{ secrets.AZUREAISEARCH_SERVICENAME }}
        AZUREAISEARCH_INDEXNAME: ${{ secrets.AZUREAISEARCH_INDEXNAME }}
        
    - name: Generate Test Report
      if: always()
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator \
          -reports:"TestResults/**/coverage.cobertura.xml" \
          -targetdir:"TestResults/CoverageReport" \
          -reporttypes:"Html;JsonSummary"
          
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.browser }}
        path: |
          TestResults/
          AzureMLWorkspace.Tests/Screenshots/
          AzureMLWorkspace.Tests/Videos/
          AzureMLWorkspace.Tests/Traces/
          AzureMLWorkspace.Tests/logs/
        retention-days: 30
        
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results (${{ matrix.os }}-${{ matrix.browser }})
        path: 'TestResults/**/*.trx'
        reporter: dotnet-trx
        fail-on-error: true
        
    - name: Comment PR with Test Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read test results summary
          const summaryPath = 'TestResults/CoverageReport/Summary.json';
          if (fs.existsSync(summaryPath)) {
            const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
            
            const comment = `## Test Results Summary ðŸ§ª
            
            **OS:** ${{ matrix.os }}
            **Browser:** ${{ matrix.browser }}
            
            **Coverage:** ${summary.summary.linecoverage}%
            **Lines Covered:** ${summary.summary.coveredlines}/${summary.summary.coverablelines}
            
            [View detailed results in the Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_category == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore AzureMLWorkspace.Tests/
      
    - name: Build solution
      run: dotnet build AzureMLWorkspace.Tests/ --no-restore --configuration Release
      
    - name: Run Performance Tests
      run: |
        dotnet test AzureMLWorkspace.Tests/ \
          --no-build \
          --configuration Release \
          --logger trx \
          --filter "Category=Performance" \
          --results-directory TestResults/Performance
      env:
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZUREAISEARCH_SERVICENAME: ${{ secrets.AZUREAISEARCH_SERVICENAME }}
        AZUREAISEARCH_INDEXNAME: ${{ secrets.AZUREAISEARCH_INDEXNAME }}
        
    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: TestResults/Performance/
        retention-days: 90

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, performance-test]
    if: always() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Notify Teams on Failure
      if: needs.test.result == 'failure' || needs.performance-test.result == 'failure'
      uses: aliencube/microsoft-teams-actions@v0.8.0
      with:
        webhook_uri: ${{ secrets.TEAMS_WEBHOOK_URI }}
        title: "Azure ML Test Automation Failed"
        summary: "Test automation pipeline failed on ${{ github.ref }}"
        text: "Please check the [GitHub Actions run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details."
        theme_color: "FF0000"
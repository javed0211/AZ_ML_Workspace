name: Azure ML Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
      
      - name: Lint with flake8
        run: |
          flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      
      - name: Format check with black
        run: black --check src tests
      
      - name: Type check with mypy
        run: mypy src --ignore-missing-imports

  smoke-tests:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
      
      - name: Install Playwright browsers
        run: playwright install --with-deps ${{ matrix.browser }}
      
      - name: Run smoke tests
        env:
          BROWSER: ${{ matrix.browser }}
          HEADLESS: true
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_ML_WORKSPACE_NAME: ${{ secrets.AZURE_ML_WORKSPACE_NAME }}
        run: |
          python -m pytest tests/smoke/ -v \
            --html=test-results/reports/smoke-${{ matrix.browser }}-report.html \
            --self-contained-html
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: smoke-test-results-${{ matrix.browser }}
          path: test-results/

  integration-tests:
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'run-integration-tests')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
      
      - name: Install Playwright browsers
        run: playwright install --with-deps chromium
      
      - name: Azure CLI login
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          az login --service-principal \
            -u $AZURE_CLIENT_ID \
            -p $AZURE_CLIENT_SECRET \
            --tenant $AZURE_TENANT_ID
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Run integration tests
        env:
          BROWSER: chromium
          HEADLESS: true
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_ML_WORKSPACE_NAME: ${{ secrets.AZURE_ML_WORKSPACE_NAME }}
          RUN_SLOW_TESTS: true
        run: |
          python -m pytest tests/ -m "not electron" -v \
            --html=test-results/reports/integration-report.html \
            --self-contained-html \
            --maxfail=5
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/

  compute-tests:
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'run-compute-tests')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
      
      - name: Install Playwright browsers
        run: playwright install --with-deps chromium
      
      - name: Azure CLI login
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          az login --service-principal \
            -u $AZURE_CLIENT_ID \
            -p $AZURE_CLIENT_SECRET \
            --tenant $AZURE_TENANT_ID
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Run compute tests
        env:
          BROWSER: chromium
          HEADLESS: true
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_ML_WORKSPACE_NAME: ${{ secrets.AZURE_ML_WORKSPACE_NAME }}
          RUN_SLOW_TESTS: true
        run: |
          python -m pytest tests/compute/ -v \
            --html=test-results/reports/compute-report.html \
            --self-contained-html \
            --maxfail=3
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: compute-test-results
          path: test-results/

  docker-tests:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: docker build -t azure-ml-tests .
      
      - name: Run tests in Docker
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_ML_WORKSPACE_NAME: ${{ secrets.AZURE_ML_WORKSPACE_NAME }}
        run: |
          docker run --rm \
            -e AZURE_TENANT_ID \
            -e AZURE_CLIENT_ID \
            -e AZURE_CLIENT_SECRET \
            -e AZURE_SUBSCRIPTION_ID \
            -e AZURE_RESOURCE_GROUP \
            -e AZURE_ML_WORKSPACE_NAME \
            -v $(pwd)/test-results:/app/test-results \
            azure-ml-tests \
            python -m pytest tests/smoke/ -v
      
      - name: Upload Docker test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: docker-test-results
          path: test-results/

  report:
    runs-on: ubuntu-latest
    needs: [smoke-tests, integration-tests]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: all-test-results/
      
      - name: Generate combined report
        run: |
          mkdir -p combined-results/reports
          echo "# Test Results Summary" > combined-results/reports/summary.md
          echo "" >> combined-results/reports/summary.md
          echo "## Test Execution Summary" >> combined-results/reports/summary.md
          echo "- **Smoke Tests**: $(find all-test-results -name "*smoke*" -type d | wc -l) browser(s)" >> combined-results/reports/summary.md
          echo "- **Integration Tests**: $(find all-test-results -name "*integration*" -type d | wc -l) run(s)" >> combined-results/reports/summary.md
          echo "- **Compute Tests**: $(find all-test-results -name "*compute*" -type d | wc -l) run(s)" >> combined-results/reports/summary.md
          echo "" >> combined-results/reports/summary.md
          echo "## Artifacts" >> combined-results/reports/summary.md
          find all-test-results -name "*.html" -exec echo "- [{}]({})" \; >> combined-results/reports/summary.md
      
      - name: Upload combined results
        uses: actions/upload-artifact@v3
        with:
          name: combined-test-results
          path: combined-results/

  notify:
    runs-on: ubuntu-latest
    needs: [smoke-tests, integration-tests, compute-tests]
    if: always() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Notify on failure
        if: contains(needs.*.result, 'failure')
        run: |
          echo "Tests failed! Consider sending notification to Teams/Slack"
          # Add actual notification logic here
      
      - name: Notify on success
        if: contains(needs.*.result, 'success')
        run: |
          echo "All tests passed successfully!"
          # Add actual notification logic here
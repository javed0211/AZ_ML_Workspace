name: Azure ML Workspace Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'smoke'
        type: choice
        options:
          - smoke
          - compute
          - notebook
          - electron
          - all
      environment:
        description: 'Environment to test against'
        required: false
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test-suite: ${{ steps.determine-suite.outputs.suite }}
      environment: ${{ steps.determine-env.outputs.env }}
    steps:
      - name: Determine test suite
        id: determine-suite
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "suite=${{ github.event.inputs.test_suite }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "suite=all" >> $GITHUB_OUTPUT
          else
            echo "suite=smoke" >> $GITHUB_OUTPUT
          fi

      - name: Determine environment
        id: determine-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            echo "env=dev" >> $GITHUB_OUTPUT
          fi

  smoke-tests:
    needs: setup
    if: needs.setup.outputs.test-suite == 'smoke' || needs.setup.outputs.test-suite == 'all'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright browsers
        run: npm run install:browsers

      - name: Setup Azure CLI
        uses: azure/CLI@v1
        with:
          azcliversion: latest

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_ML_WORKSPACE_NAME: ${{ secrets.AZURE_ML_WORKSPACE_NAME }}
          AZURE_KEY_VAULT_URL: ${{ secrets.AZURE_KEY_VAULT_URL }}
          NODE_ENV: test
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: smoke-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  compute-tests:
    needs: setup
    if: needs.setup.outputs.test-suite == 'compute' || needs.setup.outputs.test-suite == 'all'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright browsers
        run: npm run install:browsers

      - name: Setup Azure CLI
        uses: azure/CLI@v1
        with:
          azcliversion: latest

      - name: Run compute tests
        run: npm run test:compute
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_ML_WORKSPACE_NAME: ${{ secrets.AZURE_ML_WORKSPACE_NAME }}
          COMPUTE_INSTANCE_NAME: ci-test-compute-${{ github.run_number }}
          NODE_ENV: test
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: compute-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  notebook-tests:
    needs: setup
    if: needs.setup.outputs.test-suite == 'notebook' || needs.setup.outputs.test-suite == 'all'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright browsers
        run: npm run install:browsers

      - name: Setup Azure CLI
        uses: azure/CLI@v1
        with:
          azcliversion: latest

      - name: Run notebook tests
        run: npm run test:notebook
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_ML_WORKSPACE_NAME: ${{ secrets.AZURE_ML_WORKSPACE_NAME }}
          NODE_ENV: test
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: notebook-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  electron-tests:
    needs: setup
    if: needs.setup.outputs.test-suite == 'electron' || needs.setup.outputs.test-suite == 'all'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright browsers
        run: npm run install:browsers

      - name: Install VS Code (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
          sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
          sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
          sudo apt update
          sudo apt install code

      - name: Install VS Code (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install --cask visual-studio-code

      - name: Install VS Code (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install vscode

      - name: Setup Azure CLI
        uses: azure/CLI@v1
        with:
          azcliversion: latest

      - name: Run Electron tests
        run: npm run test:electron
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_ML_WORKSPACE_NAME: ${{ secrets.AZURE_ML_WORKSPACE_NAME }}
          NODE_ENV: test
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: electron-test-results-${{ matrix.os }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'azure-ml-automation'
          path: '.'
          format: 'ALL'

      - name: Upload security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: reports/
          retention-days: 7

  report-generation:
    needs: [smoke-tests, compute-tests, notebook-tests, electron-tests]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: all-test-results/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate consolidated report
        run: |
          mkdir -p consolidated-report
          # Merge all test results
          find all-test-results -name "*.json" -exec cp {} consolidated-report/ \;
          
          # Generate HTML report
          npx playwright show-report --host 0.0.0.0 || true

      - name: Upload consolidated report
        uses: actions/upload-artifact@v3
        with:
          name: consolidated-test-report
          path: |
            consolidated-report/
            playwright-report/
          retention-days: 30

      - name: Deploy report to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./playwright-report

  notification:
    needs: [smoke-tests, compute-tests, notebook-tests, electron-tests]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Determine overall status
        id: status
        run: |
          if [ "${{ needs.smoke-tests.result }}" = "failure" ] || \
             [ "${{ needs.compute-tests.result }}" = "failure" ] || \
             [ "${{ needs.notebook-tests.result }}" = "failure" ] || \
             [ "${{ needs.electron-tests.result }}" = "failure" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Send Teams notification
        if: env.TEAMS_WEBHOOK_URL != ''
        uses: aliencube/microsoft-teams-actions@v0.8.0
        with:
          webhook_uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
          title: Azure ML Automation Tests
          summary: Test run ${{ steps.status.outputs.status }}
          text: |
            **Test Results Summary**
            - Smoke Tests: ${{ needs.smoke-tests.result }}
            - Compute Tests: ${{ needs.compute-tests.result }}
            - Notebook Tests: ${{ needs.notebook-tests.result }}
            - Electron Tests: ${{ needs.electron-tests.result }}
            
            **Environment**: ${{ needs.setup.outputs.environment }}
            **Commit**: ${{ github.sha }}
            **Branch**: ${{ github.ref_name }}
          theme_color: ${{ steps.status.outputs.status == 'success' && '00FF00' || 'FF0000' }}

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            Azure ML Automation Tests: ${{ steps.status.outputs.status }}
            Environment: ${{ needs.setup.outputs.environment }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
// This file was auto-generated by AI Test Generation
// Generated on: 2024-01-15 10:30:00 UTC
// Framework: Azure ML Workspace Test Automation
// 
// IMPORTANT: Review and implement any NotImplementedException methods before running tests
// 

using AzureMLWorkspace.Tests.Framework.Screenplay;
using AzureMLWorkspace.Tests.Framework.Abilities;
using Microsoft.Extensions.Logging;

namespace AzureMLWorkspace.Tests.Framework.Questions.Generated;

/// <summary>
/// Represents a PIM activation audit log entry
/// </summary>
public class PIMActivationAuditLogEntry
{
    public string RoleName { get; set; } = string.Empty;
    public string Action { get; set; } = string.Empty;
    public string User { get; set; } = string.Empty;
    public string ResourceScope { get; set; } = string.Empty;
    public string Justification { get; set; } = string.Empty;
    public DateTime Timestamp { get; set; }
    public string Status { get; set; } = string.Empty;
    public string RequestId { get; set; } = string.Empty;
    public string Details { get; set; } = string.Empty;
}

/// <summary>
/// Question to get PIM activation audit log entries
/// </summary>
public class GetPIMActivationAuditLog : IQuestion<List<PIMActivationAuditLogEntry>>
{
    private readonly ILogger<GetPIMActivationAuditLog> _logger;
    private string _roleName = string.Empty;
    private string _justification = string.Empty;
    private DateTime? _fromDate;
    private DateTime? _toDate;

    /// <summary>
    /// The question being asked
    /// </summary>
    public string Question => $"What are the audit log entries for PIM role '{_roleName}' activations?";

    private GetPIMActivationAuditLog(ILogger<GetPIMActivationAuditLog> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Creates a question to get audit log entries for a role
    /// </summary>
    /// <param name="roleName">Name of the role</param>
    /// <returns>Question instance</returns>
    public static GetPIMActivationAuditLog ForRole(string roleName)
    {
        var logger = AzureMLWorkspace.Tests.Framework.Abilities.TestContext.ServiceProvider.GetRequiredService<ILogger<GetPIMActivationAuditLog>>();
        return new GetPIMActivationAuditLog(logger)
        {
            _roleName = roleName
        };
    }

    /// <summary>
    /// Filters audit log entries by justification
    /// </summary>
    /// <param name="justification">Justification text to filter by</param>
    /// <returns>Question instance</returns>
    public GetPIMActivationAuditLog WithJustification(string justification)
    {
        _justification = justification;
        return this;
    }

    /// <summary>
    /// Filters audit log entries by date range
    /// </summary>
    /// <param name="fromDate">Start date</param>
    /// <param name="toDate">End date</param>
    /// <returns>Question instance</returns>
    public GetPIMActivationAuditLog InDateRange(DateTime fromDate, DateTime toDate)
    {
        _fromDate = fromDate;
        _toDate = toDate;
        return this;
    }

    /// <summary>
    /// Gets the PIM activation audit log entries
    /// </summary>
    /// <param name="actor">The actor asking the question</param>
    /// <returns>List of audit log entries</returns>
    public async Task<List<PIMActivationAuditLogEntry>> AnsweredBy(IActor actor)
    {
        _logger.LogInformation("Actor {ActorName} retrieving PIM activation audit log for role {RoleName}", 
            actor.Name, _roleName);

        try
        {
            var browser = actor.Using<BrowseTheWeb>();
            var page = browser.Page;

            // Navigate to PIM if not already there
            await EnsureOnPIMPage(page);

            // Navigate to audit log section
            await NavigateToAuditLog(page);

            // Apply filters if specified
            await ApplyFilters(page);

            // Extract audit log entries
            var auditEntries = await ExtractAuditLogEntries(page);

            _logger.LogInformation("Retrieved {Count} audit log entries for role {RoleName}", 
                auditEntries.Count, _roleName);

            return auditEntries;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving PIM activation audit log for role {RoleName}", _roleName);
            return new List<PIMActivationAuditLogEntry>();
        }
    }

    private async Task EnsureOnPIMPage(IPage page)
    {
        var currentUrl = page.Url;
        
        if (!currentUrl.Contains("privilegedidentitymanagement") && !currentUrl.Contains("pim"))
        {
            _logger.LogDebug("Navigating to PIM dashboard");
            
            await page.GotoAsync("https://portal.azure.com/#view/Microsoft_Azure_PIMCommon/CommonMenuBlade/~/quickStart", 
                new() { WaitUntil = WaitUntilState.NetworkIdle });
            
            await page.WaitForSelectorAsync("[data-testid='pim-dashboard'], .pim-dashboard, .ms-Nav-compositeLink", 
                new() { Timeout = 30000 });
        }
    }

    private async Task NavigateToAuditLog(IPage page)
    {
        try
        {
            // Look for audit log or activity log section
            var auditLogSelectors = new[]
            {
                "text='Audit log'",
                "text='Activity log'",
                "text='Audit history'",
                ".audit-log",
                "[data-testid='audit-log']"
            };

            foreach (var selector in auditLogSelectors)
            {
                var element = await page.QuerySelectorAsync(selector);
                if (element != null)
                {
                    await element.ClickAsync();
                    await page.WaitForSelectorAsync(".audit-table, .log-entries, [data-testid='audit-entries']", 
                        new() { Timeout = 15000 });
                    return;
                }
            }

            _logger.LogWarning("Could not find audit log section, staying on current page");
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Error navigating to audit log section");
        }
    }

    private async Task ApplyFilters(IPage page)
    {
        try
        {
            // Apply role name filter if available
            var roleFilterSelector = "input[placeholder*='Role'], select[name*='role'], .role-filter";
            var roleFilterElement = await page.QuerySelectorAsync(roleFilterSelector);
            if (roleFilterElement != null)
            {
                await roleFilterElement.FillAsync(_roleName);
            }

            // Apply date range filter if specified
            if (_fromDate.HasValue && _toDate.HasValue)
            {
                var fromDateSelector = "input[type='date'][name*='from'], .date-from";
                var fromDateElement = await page.QuerySelectorAsync(fromDateSelector);
                if (fromDateElement != null)
                {
                    await fromDateElement.FillAsync(_fromDate.Value.ToString("yyyy-MM-dd"));
                }

                var toDateSelector = "input[type='date'][name*='to'], .date-to";
                var toDateElement = await page.QuerySelectorAsync(toDateSelector);
                if (toDateElement != null)
                {
                    await toDateElement.FillAsync(_toDate.Value.ToString("yyyy-MM-dd"));
                }
            }

            // Apply justification filter if specified
            if (!string.IsNullOrEmpty(_justification))
            {
                var justificationFilterSelector = "input[placeholder*='Justification'], .justification-filter";
                var justificationFilterElement = await page.QuerySelectorAsync(justificationFilterSelector);
                if (justificationFilterElement != null)
                {
                    await justificationFilterElement.FillAsync(_justification);
                }
            }

            // Click apply or search button if available
            var applyButtonSelector = "button[type='submit'], text='Apply', text='Search', .apply-filters";
            var applyButton = await page.QuerySelectorAsync(applyButtonSelector);
            if (applyButton != null)
            {
                await applyButton.ClickAsync();
                await page.WaitForSelectorAsync(".audit-table, .log-entries", new() { Timeout = 10000 });
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Error applying filters to audit log");
        }
    }

    private async Task<List<PIMActivationAuditLogEntry>> ExtractAuditLogEntries(IPage page)
    {
        var entries = new List<PIMActivationAuditLogEntry>();

        try
        {
            // Look for audit log table rows
            var rowSelectors = new[]
            {
                ".audit-table tbody tr",
                ".log-entries .log-entry",
                "[data-testid='audit-entry']",
                ".audit-row"
            };

            IReadOnlyList<IElementHandle>? rows = null;
            foreach (var selector in rowSelectors)
            {
                rows = await page.QuerySelectorAllAsync(selector);
                if (rows.Count > 0)
                {
                    break;
                }
            }

            if (rows == null || rows.Count == 0)
            {
                _logger.LogDebug("No audit log rows found");
                return entries;
            }

            foreach (var row in rows)
            {
                var entry = await ExtractEntryFromRow(row);
                if (entry != null && 
                    (string.IsNullOrEmpty(_roleName) || entry.RoleName.Contains(_roleName, StringComparison.OrdinalIgnoreCase)))
                {
                    entries.Add(entry);
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error extracting audit log entries");
        }

        return entries;
    }

    private async Task<PIMActivationAuditLogEntry?> ExtractEntryFromRow(IElementHandle rowElement)
    {
        try
        {
            var entry = new PIMActivationAuditLogEntry();

            // Extract role name
            var roleElement = await rowElement.QuerySelectorAsync(".role, [data-role], td:nth-child(2)");
            if (roleElement != null)
            {
                entry.RoleName = await roleElement.TextContentAsync() ?? string.Empty;
            }

            // Extract action
            var actionElement = await rowElement.QuerySelectorAsync(".action, [data-action], td:nth-child(1)");
            if (actionElement != null)
            {
                entry.Action = await actionElement.TextContentAsync() ?? string.Empty;
            }

            // Extract user
            var userElement = await rowElement.QuerySelectorAsync(".user, [data-user], td:nth-child(3)");
            if (userElement != null)
            {
                entry.User = await userElement.TextContentAsync() ?? string.Empty;
            }

            // Extract timestamp
            var timestampElement = await rowElement.QuerySelectorAsync(".timestamp, .date, [data-timestamp], td:nth-child(4)");
            if (timestampElement != null)
            {
                var timestampText = await timestampElement.TextContentAsync();
                if (DateTime.TryParse(timestampText, out var parsedTime))
                {
                    entry.Timestamp = parsedTime;
                }
            }

            // Extract status
            var statusElement = await rowElement.QuerySelectorAsync(".status, [data-status], td:nth-child(5)");
            if (statusElement != null)
            {
                entry.Status = await statusElement.TextContentAsync() ?? string.Empty;
            }

            // Extract justification
            var justificationElement = await rowElement.QuerySelectorAsync(".justification, [data-justification]");
            if (justificationElement != null)
            {
                entry.Justification = await justificationElement.TextContentAsync() ?? string.Empty;
            }

            return entry;
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Error extracting audit entry from row");
            return null;
        }
    }
}
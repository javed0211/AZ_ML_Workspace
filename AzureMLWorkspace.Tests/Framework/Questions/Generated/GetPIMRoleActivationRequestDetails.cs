// This file was auto-generated by AI Test Generation
// Generated on: 2024-01-15 10:30:00 UTC
// Framework: Azure ML Workspace Test Automation
// 
// IMPORTANT: Review and implement any NotImplementedException methods before running tests
// 

using AzureMLWorkspace.Tests.Framework.Screenplay;
using AzureMLWorkspace.Tests.Framework.Abilities;
using Microsoft.Extensions.Logging;

namespace AzureMLWorkspace.Tests.Framework.Questions.Generated;

/// <summary>
/// Represents PIM role activation request details
/// </summary>
public class PIMRoleActivationRequestDetails
{
    public string RoleName { get; set; } = string.Empty;
    public string ResourceScope { get; set; } = string.Empty;
    public string Status { get; set; } = string.Empty;
    public string Justification { get; set; } = string.Empty;
    public DateTime RequestTime { get; set; }
    public DateTime? ActivationTime { get; set; }
    public DateTime? ExpirationTime { get; set; }
    public int DurationHours { get; set; }
    public string RequestId { get; set; } = string.Empty;
}

/// <summary>
/// Question to get PIM role activation request details
/// </summary>
public class GetPIMRoleActivationRequestDetails : IQuestion<PIMRoleActivationRequestDetails>
{
    private readonly ILogger<GetPIMRoleActivationRequestDetails> _logger;
    private string _roleName = string.Empty;

    /// <summary>
    /// The question being asked
    /// </summary>
    public string Question => $"What are the activation request details for PIM role '{_roleName}'?";

    private GetPIMRoleActivationRequestDetails(ILogger<GetPIMRoleActivationRequestDetails> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Creates a question to get role activation request details
    /// </summary>
    /// <param name="roleName">Name of the role</param>
    /// <returns>Question instance</returns>
    public static GetPIMRoleActivationRequestDetails ForRole(string roleName)
    {
        var logger = AzureMLWorkspace.Tests.Framework.Abilities.TestContext.ServiceProvider.GetRequiredService<ILogger<GetPIMRoleActivationRequestDetails>>();
        return new GetPIMRoleActivationRequestDetails(logger)
        {
            _roleName = roleName
        };
    }

    /// <summary>
    /// Gets the PIM role activation request details
    /// </summary>
    /// <param name="actor">The actor asking the question</param>
    /// <returns>Role activation request details</returns>
    public async Task<PIMRoleActivationRequestDetails> AnsweredBy(IActor actor)
    {
        _logger.LogInformation("Actor {ActorName} retrieving PIM role activation request details for {RoleName}", 
            actor.Name, _roleName);

        try
        {
            var browser = actor.Using<BrowseTheWeb>();
            var page = browser.Page;

            // Navigate to PIM if not already there
            await EnsureOnPIMPage(page);

            // Navigate to pending requests or my requests section
            await NavigateToRequestsSection(page);

            // Find the specific role request
            var requestDetails = await FindRoleRequestDetails(page);

            _logger.LogInformation("Retrieved request details for role {RoleName}: Status={Status}, RequestId={RequestId}", 
                _roleName, requestDetails.Status, requestDetails.RequestId);

            return requestDetails;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving PIM role activation request details for {RoleName}", _roleName);
            
            // Return empty details with error status
            return new PIMRoleActivationRequestDetails
            {
                RoleName = _roleName,
                Status = "Error",
                RequestTime = DateTime.UtcNow
            };
        }
    }

    private async Task EnsureOnPIMPage(IPage page)
    {
        var currentUrl = page.Url;
        
        if (!currentUrl.Contains("privilegedidentitymanagement") && !currentUrl.Contains("pim"))
        {
            _logger.LogDebug("Navigating to PIM dashboard");
            
            await page.GotoAsync("https://portal.azure.com/#view/Microsoft_Azure_PIMCommon/CommonMenuBlade/~/quickStart", 
                new() { WaitUntil = WaitUntilState.NetworkIdle });
            
            await page.WaitForSelectorAsync("[data-testid='pim-dashboard'], .pim-dashboard, .ms-Nav-compositeLink", 
                new() { Timeout = 30000 });
        }
    }

    private async Task NavigateToRequestsSection(IPage page)
    {
        try
        {
            // Look for "My requests" or "Pending requests" section
            var requestsSectionSelectors = new[]
            {
                "text='My requests'",
                "text='Pending requests'",
                "text='Request history'",
                ".requests-section",
                "[data-testid='requests']"
            };

            foreach (var selector in requestsSectionSelectors)
            {
                var element = await page.QuerySelectorAsync(selector);
                if (element != null)
                {
                    await element.ClickAsync();
                    await page.WaitForSelectorAsync(".request-list, .requests-table, [data-testid='request-list']", 
                        new() { Timeout = 15000 });
                    return;
                }
            }

            _logger.LogWarning("Could not find requests section, staying on current page");
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Error navigating to requests section");
        }
    }

    private async Task<PIMRoleActivationRequestDetails> FindRoleRequestDetails(IPage page)
    {
        var details = new PIMRoleActivationRequestDetails
        {
            RoleName = _roleName,
            RequestTime = DateTime.UtcNow
        };

        try
        {
            // Look for the role in the requests table
            var roleSelector = $"text='{_roleName}', [data-role-name='{_roleName}']";
            var roleElements = await page.QuerySelectorAllAsync(roleSelector);

            foreach (var roleElement in roleElements)
            {
                // Get the parent row or container
                var parentRow = await roleElement.QuerySelectorAsync("xpath=ancestor::tr | xpath=ancestor::.request-row");
                if (parentRow != null)
                {
                    // Extract details from the row
                    await ExtractDetailsFromRow(parentRow, details);
                    break;
                }
            }

            // If no specific request found, try to get general information
            if (string.IsNullOrEmpty(details.Status))
            {
                details.Status = "Not Found";
                _logger.LogDebug("No specific request details found for role {RoleName}", _roleName);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error finding role request details");
            details.Status = "Error";
        }

        return details;
    }

    private async Task ExtractDetailsFromRow(IElementHandle rowElement, PIMRoleActivationRequestDetails details)
    {
        try
        {
            // Extract status
            var statusElement = await rowElement.QuerySelectorAsync(".status, .request-status, [data-status]");
            if (statusElement != null)
            {
                details.Status = await statusElement.TextContentAsync() ?? "Unknown";
            }

            // Extract resource scope
            var resourceElement = await rowElement.QuerySelectorAsync(".resource, .scope, [data-resource]");
            if (resourceElement != null)
            {
                details.ResourceScope = await resourceElement.TextContentAsync() ?? string.Empty;
            }

            // Extract justification
            var justificationElement = await rowElement.QuerySelectorAsync(".justification, [data-justification]");
            if (justificationElement != null)
            {
                details.Justification = await justificationElement.TextContentAsync() ?? string.Empty;
            }

            // Extract request ID
            var requestIdElement = await rowElement.QuerySelectorAsync(".request-id, [data-request-id]");
            if (requestIdElement != null)
            {
                details.RequestId = await requestIdElement.TextContentAsync() ?? string.Empty;
            }

            // Extract timestamps (this is a simplified approach)
            var timestampElements = await rowElement.QuerySelectorAllAsync(".timestamp, .date-time, [data-timestamp]");
            if (timestampElements.Count > 0)
            {
                var timestampText = await timestampElements[0].TextContentAsync();
                if (DateTime.TryParse(timestampText, out var parsedTime))
                {
                    details.RequestTime = parsedTime;
                }
            }

            _logger.LogDebug("Extracted details: Status={Status}, Resource={Resource}, RequestId={RequestId}", 
                details.Status, details.ResourceScope, details.RequestId);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Error extracting details from row");
        }
    }
}
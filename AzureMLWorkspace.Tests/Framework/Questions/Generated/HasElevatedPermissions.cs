// This file was auto-generated by AI Test Generation
// Generated on: 2024-01-15 10:30:00 UTC
// Framework: Azure ML Workspace Test Automation
// 
// IMPORTANT: Review and implement any NotImplementedException methods before running tests
// 

using AzureMLWorkspace.Tests.Framework.Screenplay;
using AzureMLWorkspace.Tests.Framework.Abilities;
using Microsoft.Extensions.Logging;

namespace AzureMLWorkspace.Tests.Framework.Questions.Generated;

/// <summary>
/// Question to check if the user has elevated permissions for a specific role
/// </summary>
public class HasElevatedPermissions : IQuestion<bool>
{
    private readonly ILogger<HasElevatedPermissions> _logger;
    private string _roleName = string.Empty;
    private string _resourceScope = string.Empty;

    /// <summary>
    /// The question being asked
    /// </summary>
    public string Question => $"Does user have elevated permissions for role '{_roleName}' in resource '{_resourceScope}'?";

    private HasElevatedPermissions(ILogger<HasElevatedPermissions> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Creates a question to check elevated permissions for a role
    /// </summary>
    /// <param name="roleName">Name of the role</param>
    /// <returns>Question instance</returns>
    public static HasElevatedPermissions ForRole(string roleName)
    {
        var logger = AzureMLWorkspace.Tests.Framework.Abilities.TestContext.ServiceProvider.GetRequiredService<ILogger<HasElevatedPermissions>>();
        return new HasElevatedPermissions(logger)
        {
            _roleName = roleName
        };
    }

    /// <summary>
    /// Specifies the resource scope to check permissions for
    /// </summary>
    /// <param name="resourceScope">Resource scope</param>
    /// <returns>Question instance</returns>
    public HasElevatedPermissions InResource(string resourceScope)
    {
        _resourceScope = resourceScope;
        return this;
    }

    /// <summary>
    /// Gets the answer to whether the user has elevated permissions
    /// </summary>
    /// <param name="actor">The actor asking the question</param>
    /// <returns>True if user has elevated permissions, false otherwise</returns>
    public async Task<bool> AnsweredBy(IActor actor)
    {
        _logger.LogInformation("Actor {ActorName} checking elevated permissions for role {RoleName} in resource {ResourceScope}", 
            actor.Name, _roleName, _resourceScope);

        try
        {
            var browser = actor.Using<BrowseTheWeb>();
            var page = browser.Page;

            // Navigate to PIM if not already there
            await EnsureOnPIMPage(page);

            // Look for active assignments section
            var activeAssignmentsSelector = "text='Active assignments', .active-assignments, [data-testid='active-assignments']";
            await page.WaitForSelectorAsync(activeAssignmentsSelector, new() { Timeout = 15000 });

            // Look for the specific role in active assignments
            var roleSelector = $"text='{_roleName}', [data-role-name='{_roleName}']";
            var roleElements = await page.QuerySelectorAllAsync(roleSelector);

            foreach (var roleElement in roleElements)
            {
                // Check if this role assignment is for the correct resource scope
                var parentRow = await roleElement.QuerySelectorAsync("xpath=ancestor::tr | xpath=ancestor::.assignment-row");
                if (parentRow != null)
                {
                    var rowText = await parentRow.TextContentAsync();
                    if (rowText?.Contains(_resourceScope) == true)
                    {
                        // Check if the role is currently active
                        var statusElement = await parentRow.QuerySelectorAsync(".status, .role-status, [data-status]");
                        if (statusElement != null)
                        {
                            var statusText = await statusElement.TextContentAsync();
                            var isActive = statusText?.ToLowerInvariant().Contains("active") == true;
                            
                            _logger.LogDebug("Found role {RoleName} with status: {StatusText}, IsActive: {IsActive}", 
                                _roleName, statusText, isActive);
                            
                            return isActive;
                        }
                    }
                }
            }

            // Alternative check: try to perform an action that requires elevated permissions
            // This is a placeholder for actual permission testing
            _logger.LogDebug("Role not found in active assignments, checking alternative indicators");
            
            // Look for any indicators that elevated permissions are active
            var elevatedIndicators = new[]
            {
                ".elevated-permissions",
                ".admin-mode",
                "[data-elevated='true']",
                "text='Elevated access active'"
            };

            foreach (var indicator in elevatedIndicators)
            {
                var element = await page.QuerySelectorAsync(indicator);
                if (element != null)
                {
                    _logger.LogDebug("Found elevated permissions indicator: {Indicator}", indicator);
                    return true;
                }
            }

            _logger.LogDebug("No elevated permissions found for role {RoleName} in resource {ResourceScope}", 
                _roleName, _resourceScope);
            return false;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error checking elevated permissions for role {RoleName} in resource {ResourceScope}", 
                _roleName, _resourceScope);
            return false;
        }
    }

    private async Task EnsureOnPIMPage(IPage page)
    {
        var currentUrl = page.Url;
        
        if (!currentUrl.Contains("privilegedidentitymanagement") && !currentUrl.Contains("pim"))
        {
            _logger.LogDebug("Navigating to PIM dashboard");
            
            await page.GotoAsync("https://portal.azure.com/#view/Microsoft_Azure_PIMCommon/CommonMenuBlade/~/quickStart", 
                new() { WaitUntil = WaitUntilState.NetworkIdle });
            
            await page.WaitForSelectorAsync("[data-testid='pim-dashboard'], .pim-dashboard, .ms-Nav-compositeLink", 
                new() { Timeout = 30000 });
        }
    }
}
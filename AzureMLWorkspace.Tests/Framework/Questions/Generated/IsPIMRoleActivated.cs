// This file was auto-generated by AI Test Generation
// Generated on: 2024-01-15 10:30:00 UTC
// Framework: Azure ML Workspace Test Automation
// 
// IMPORTANT: Review and implement any NotImplementedException methods before running tests
// 

using AzureMLWorkspace.Tests.Framework.Screenplay;
using AzureMLWorkspace.Tests.Framework.Abilities;
using Microsoft.Extensions.Logging;

namespace AzureMLWorkspace.Tests.Framework.Questions.Generated;

/// <summary>
/// Question to check if a PIM role is activated
/// </summary>
public class IsPIMRoleActivated : IQuestion<bool>
{
    private readonly ILogger<IsPIMRoleActivated> _logger;
    private string _roleName = string.Empty;
    private string _resourceScope = string.Empty;

    /// <summary>
    /// The question being asked
    /// </summary>
    public string Question => $"Is PIM role '{_roleName}' activated for resource '{_resourceScope}'?";

    private IsPIMRoleActivated(ILogger<IsPIMRoleActivated> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Creates a question to check if the specified role is activated
    /// </summary>
    /// <param name="roleName">Name of the role to check</param>
    /// <returns>Question instance</returns>
    public static IsPIMRoleActivated ForRole(string roleName)
    {
        var logger = AzureMLWorkspace.Tests.Framework.Abilities.TestContext.ServiceProvider.GetRequiredService<ILogger<IsPIMRoleActivated>>();
        return new IsPIMRoleActivated(logger)
        {
            _roleName = roleName
        };
    }

    /// <summary>
    /// Specifies the resource scope to check the role activation for
    /// </summary>
    /// <param name="resourceScope">Resource scope</param>
    /// <returns>Question instance</returns>
    public IsPIMRoleActivated InResource(string resourceScope)
    {
        _resourceScope = resourceScope;
        return this;
    }

    /// <summary>
    /// Answers the question by checking if the PIM role is activated
    /// </summary>
    /// <param name="actor">The actor asking the question</param>
    /// <returns>True if the role is activated, false otherwise</returns>
    public async Task<bool> AnsweredBy(IActor actor)
    {
        _logger.LogInformation("Checking if PIM role {RoleName} is activated for {ResourceScope}", _roleName, _resourceScope);

        try
        {
            var browser = actor.Using<BrowseTheWeb>();
            var page = browser.Page;

            // Navigate to PIM active assignments
            await NavigateToActiveAssignments(page);

            // Check if the role is in the active assignments list
            var isActive = await CheckRoleActivationStatus(page);

            _logger.LogInformation("PIM role {RoleName} activation status: {IsActive}", _roleName, isActive);
            return isActive;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to check PIM role activation status for {RoleName}", _roleName);
            
            // In case of error, we might want to return false or rethrow depending on requirements
            // For now, we'll rethrow to make the test fail explicitly
            throw new InvalidOperationException($"Could not determine PIM role activation status: {ex.Message}", ex);
        }
    }

    private async Task NavigateToActiveAssignments(IPage page)
    {
        var currentUrl = page.Url;
        
        // Check if we're already on the PIM page
        if (!currentUrl.Contains("privilegedidentitymanagement") && !currentUrl.Contains("pim"))
        {
            _logger.LogDebug("Navigating to PIM dashboard");
            await page.GotoAsync("https://portal.azure.com/#view/Microsoft_Azure_PIMCommon/CommonMenuBlade/~/quickStart", 
                new() { WaitUntil = WaitUntilState.NetworkIdle });
        }

        // Navigate to active assignments
        try
        {
            // Look for "My roles" or "Active assignments" link
            var activeAssignmentsSelector = "text='Active assignments', text='My roles', [data-testid='active-assignments']";
            var activeAssignmentsLink = await page.QuerySelectorAsync(activeAssignmentsSelector);
            
            if (activeAssignmentsLink != null)
            {
                await activeAssignmentsLink.ClickAsync();
            }
            else
            {
                // Try alternative navigation
                await page.ClickAsync("text='My roles'");
                await page.ClickAsync("text='Active assignments'");
            }

            // Wait for the active assignments page to load
            await page.WaitForSelectorAsync(".active-assignments, [data-testid='active-assignments-list']", 
                new() { Timeout = 30000 });
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Could not navigate to active assignments, trying alternative approach");
            
            // Fallback: try direct URL
            await page.GotoAsync("https://portal.azure.com/#view/Microsoft_Azure_PIMCommon/ActivationMenuBlade/~/azurerbac", 
                new() { WaitUntil = WaitUntilState.NetworkIdle });
        }
    }

    private async Task<bool> CheckRoleActivationStatus(IPage page)
    {
        try
        {
            // Wait for the assignments list to load
            await page.WaitForSelectorAsync(".assignments-list, .role-assignments, [data-testid='assignments-list']", 
                new() { Timeout = 15000 });

            // Look for the specific role in active assignments
            var roleSelectors = new[]
            {
                $"text='{_roleName}'",
                $"[data-role-name='{_roleName}']",
                $".role-name:has-text('{_roleName}')",
                $"td:has-text('{_roleName}')"
            };

            foreach (var selector in roleSelectors)
            {
                var roleElement = await page.QuerySelectorAsync(selector);
                if (roleElement != null)
                {
                    // Check if this role is in the active state
                    var isActive = await IsRoleInActiveState(page, roleElement);
                    if (isActive)
                    {
                        return true;
                    }
                }
            }

            // Alternative approach: check for role in active assignments table
            var activeRoles = await page.QuerySelectorAllAsync(".active-assignment, .activated-role, [data-status='active']");
            
            foreach (var activeRole in activeRoles)
            {
                var roleText = await activeRole.TextContentAsync();
                if (!string.IsNullOrEmpty(roleText) && roleText.Contains(_roleName))
                {
                    // Additional check for resource scope if specified
                    if (!string.IsNullOrEmpty(_resourceScope))
                    {
                        if (roleText.Contains(_resourceScope))
                        {
                            return true;
                        }
                    }
                    else
                    {
                        return true;
                    }
                }
            }

            return false;
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Error checking role activation status, assuming not active");
            return false;
        }
    }

    private async Task<bool> IsRoleInActiveState(IPage page, IElementHandle roleElement)
    {
        try
        {
            // Check for status indicators
            var statusSelectors = new[]
            {
                ".status-active",
                ".activated",
                "[data-status='active']",
                "text='Active'",
                "text='Activated'"
            };

            // Look for status indicators in the same row or nearby elements
            var parentRow = await roleElement.QuerySelectorAsync("xpath=ancestor::tr") ?? 
                           await roleElement.QuerySelectorAsync("xpath=ancestor::div[contains(@class, 'row')]") ??
                           roleElement;

            foreach (var statusSelector in statusSelectors)
            {
                var statusElement = await parentRow.QuerySelectorAsync(statusSelector);
                if (statusElement != null)
                {
                    return true;
                }
            }

            // Check the text content of the parent row for status keywords
            var rowText = await parentRow.TextContentAsync();
            if (!string.IsNullOrEmpty(rowText))
            {
                var activeKeywords = new[] { "active", "activated", "enabled" };
                return activeKeywords.Any(keyword => rowText.ToLowerInvariant().Contains(keyword));
            }

            return false;
        }
        catch (Exception ex)
        {
            _logger.LogDebug(ex, "Error checking role active state");
            return false;
        }
    }
}
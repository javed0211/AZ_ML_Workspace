// This file was auto-generated by AI Test Generation
// Generated on: 2024-01-15 10:30:00 UTC
// Framework: Azure ML Workspace Test Automation
// 
// IMPORTANT: Review and implement any NotImplementedException methods before running tests
// 

using AzureMLWorkspace.Tests.Framework.Screenplay;
using AzureMLWorkspace.Tests.Framework.Abilities;
using Microsoft.Extensions.Logging;

namespace AzureMLWorkspace.Tests.Framework.Questions.Generated;

/// <summary>
/// Question to check if a PIM role activation request has been submitted
/// </summary>
public class IsPIMRoleActivationRequestSubmitted : IQuestion<bool>
{
    private readonly ILogger<IsPIMRoleActivationRequestSubmitted> _logger;
    private string _roleName = string.Empty;

    /// <summary>
    /// The question being asked
    /// </summary>
    public string Question => $"Is PIM role activation request submitted for '{_roleName}'?";

    private IsPIMRoleActivationRequestSubmitted(ILogger<IsPIMRoleActivationRequestSubmitted> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Creates a question to check if the role activation request is submitted
    /// </summary>
    /// <param name="roleName">Name of the role</param>
    /// <returns>Question instance</returns>
    public static IsPIMRoleActivationRequestSubmitted ForRole(string roleName)
    {
        var logger = AzureMLWorkspace.Tests.Framework.Abilities.TestContext.ServiceProvider.GetRequiredService<ILogger<IsPIMRoleActivationRequestSubmitted>>();
        return new IsPIMRoleActivationRequestSubmitted(logger)
        {
            _roleName = roleName
        };
    }

    /// <summary>
    /// Gets the answer to whether the PIM role activation request is submitted
    /// </summary>
    /// <param name="actor">The actor asking the question</param>
    /// <returns>True if request is submitted, false otherwise</returns>
    public async Task<bool> AnsweredBy(IActor actor)
    {
        _logger.LogInformation("Actor {ActorName} checking if PIM role activation request is submitted for {RoleName}", 
            actor.Name, _roleName);

        try
        {
            var browser = actor.Using<BrowseTheWeb>();
            var page = browser.Page;

            // Look for confirmation messages or success indicators
            var confirmationSelectors = new[]
            {
                "text='Activation request submitted'",
                "text='Request submitted successfully'",
                "text='Successfully activated'",
                ".success-message",
                ".confirmation-message",
                "[data-testid='activation-success']"
            };

            foreach (var selector in confirmationSelectors)
            {
                var element = await page.QuerySelectorAsync(selector);
                if (element != null)
                {
                    _logger.LogDebug("Found confirmation element with selector: {Selector}", selector);
                    return true;
                }
            }

            // Check if we're back on the PIM dashboard (might indicate success)
            var currentUrl = page.Url;
            if (currentUrl.Contains("privilegedidentitymanagement") || currentUrl.Contains("pim"))
            {
                // Look for the role in active assignments
                var activeRoleSelector = $"text='{_roleName}', [data-role-name='{_roleName}']";
                var activeRoleElement = await page.QuerySelectorAsync(activeRoleSelector);
                
                if (activeRoleElement != null)
                {
                    // Check if it shows as active or pending
                    var statusElement = await activeRoleElement.QuerySelectorAsync(".status, .role-status, [data-status]");
                    if (statusElement != null)
                    {
                        var statusText = await statusElement.TextContentAsync();
                        var isActiveOrPending = statusText?.ToLowerInvariant().Contains("active") == true ||
                                              statusText?.ToLowerInvariant().Contains("pending") == true;
                        
                        _logger.LogDebug("Role status: {StatusText}, IsActiveOrPending: {IsActiveOrPending}", 
                            statusText, isActiveOrPending);
                        
                        return isActiveOrPending;
                    }
                }
            }

            _logger.LogDebug("No confirmation indicators found for role activation request");
            return false;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error checking PIM role activation request status for {RoleName}", _roleName);
            return false;
        }
    }
}
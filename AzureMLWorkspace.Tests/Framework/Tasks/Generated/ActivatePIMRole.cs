// This file was auto-generated by AI Test Generation
// Generated on: 2024-01-15 10:30:00 UTC
// Framework: Azure ML Workspace Test Automation
// 
// IMPORTANT: Review and implement any NotImplementedException methods before running tests
// 

using AzureMLWorkspace.Tests.Framework.Screenplay;
using AzureMLWorkspace.Tests.Framework.Abilities;
using Microsoft.Extensions.Logging;

namespace AzureMLWorkspace.Tests.Framework.Tasks.Generated;

/// <summary>
/// Task to activate a PIM (Privileged Identity Management) role
/// </summary>
public class ActivatePIMRole : ITask
{
    private readonly ILogger<ActivatePIMRole> _logger;
    private string _roleName = string.Empty;
    private string _resourceScope = string.Empty;
    private string _justification = string.Empty;
    private int _durationHours = 8; // Default duration

    /// <summary>
    /// The name of the task
    /// </summary>
    public string Name => $"Activate PIM role '{_roleName}' for resource '{_resourceScope}'";

    private ActivatePIMRole(ILogger<ActivatePIMRole> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Creates a PIM role activation task for the specified role
    /// </summary>
    /// <param name="roleName">Name of the role to activate</param>
    /// <returns>PIM role activation task instance</returns>
    public static ActivatePIMRole WithRole(string roleName)
    {
        var logger = AzureMLWorkspace.Tests.Framework.Abilities.TestContext.ServiceProvider.GetRequiredService<ILogger<ActivatePIMRole>>();
        return new ActivatePIMRole(logger)
        {
            _roleName = roleName
        };
    }

    /// <summary>
    /// Specifies the resource scope for the role activation
    /// </summary>
    /// <param name="resourceScope">Resource scope (e.g., subscription, resource group)</param>
    /// <returns>PIM role activation task instance</returns>
    public ActivatePIMRole ForResource(string resourceScope)
    {
        _resourceScope = resourceScope;
        return this;
    }

    /// <summary>
    /// Adds justification for the role activation
    /// </summary>
    /// <param name="justification">Justification text</param>
    /// <returns>PIM role activation task instance</returns>
    public ActivatePIMRole WithJustification(string justification)
    {
        _justification = justification;
        return this;
    }

    /// <summary>
    /// Sets the duration for the role activation
    /// </summary>
    /// <param name="hours">Duration in hours</param>
    /// <returns>PIM role activation task instance</returns>
    public ActivatePIMRole ForDuration(int hours)
    {
        _durationHours = hours;
        return this;
    }

    /// <summary>
    /// Performs the PIM role activation task
    /// </summary>
    /// <param name="actor">The actor performing the task</param>
    public async Task PerformAs(IActor actor)
    {
        _logger.LogInformation("Actor {ActorName} attempting to activate PIM role {RoleName} for {ResourceScope}", 
            actor.Name, _roleName, _resourceScope);

        try
        {
            var browser = actor.Using<BrowseTheWeb>();
            var page = browser.Page;

            // Navigate to PIM if not already there
            await EnsureOnPIMPage(page);

            // Find and activate the role
            await ActivateRole(page);

            _logger.LogInformation("Successfully activated PIM role {RoleName} for {ResourceScope}", _roleName, _resourceScope);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to activate PIM role {RoleName} for {ResourceScope}", _roleName, _resourceScope);
            throw new InvalidOperationException($"PIM role activation failed: {ex.Message}", ex);
        }
    }

    private async Task EnsureOnPIMPage(IPage page)
    {
        var currentUrl = page.Url;
        
        if (!currentUrl.Contains("privilegedidentitymanagement") && !currentUrl.Contains("pim"))
        {
            _logger.LogDebug("Navigating to PIM dashboard");
            
            // Navigate to PIM through Azure portal
            await page.GotoAsync("https://portal.azure.com/#view/Microsoft_Azure_PIMCommon/CommonMenuBlade/~/quickStart", 
                new() { WaitUntil = WaitUntilState.NetworkIdle });
            
            // Wait for PIM page to load
            await page.WaitForSelectorAsync("[data-testid='pim-dashboard'], .pim-dashboard, .ms-Nav-compositeLink", 
                new() { Timeout = 30000 });
        }
    }

    private async Task ActivateRole(IPage page)
    {
        try
        {
            // Look for "My roles" or "Activate" section
            var myRolesSelector = "text='My roles', [data-testid='my-roles'], .my-roles-section";
            await page.WaitForSelectorAsync(myRolesSelector, new() { Timeout = 30000 });
            
            // Find the specific role to activate
            var roleSelector = $"text='{_roleName}', [data-role-name='{_roleName}']";
            var roleElement = await page.QuerySelectorAsync(roleSelector);
            
            if (roleElement == null)
            {
                throw new InvalidOperationException($"Role '{_roleName}' not found in available roles");
            }

            // Click on the role or find the activate button
            var activateButtonSelector = $"text='Activate', button[data-action='activate'], .activate-button";
            
            // Try to find activate button near the role
            var activateButton = await roleElement.QuerySelectorAsync(activateButtonSelector) ??
                                await page.QuerySelectorAsync($"{roleSelector} ~ {activateButtonSelector}") ??
                                await page.QuerySelectorAsync(activateButtonSelector);

            if (activateButton == null)
            {
                // Try clicking on the role itself to open activation dialog
                await roleElement.ClickAsync();
                
                // Wait for activation dialog
                await page.WaitForSelectorAsync(".activation-dialog, [data-testid='activation-dialog']", 
                    new() { Timeout = 10000 });
                
                activateButton = await page.QuerySelectorAsync(activateButtonSelector);
            }

            if (activateButton == null)
            {
                throw new InvalidOperationException($"Activate button not found for role '{_roleName}'");
            }

            await activateButton.ClickAsync();

            // Fill in activation details
            await FillActivationDetails(page);

            // Submit the activation request
            await SubmitActivationRequest(page);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error during role activation process");
            throw;
        }
    }

    private async Task FillActivationDetails(IPage page)
    {
        try
        {
            // Wait for activation form
            await page.WaitForSelectorAsync(".activation-form, [data-testid='activation-form']", 
                new() { Timeout = 15000 });

            // Set duration if available
            var durationSelector = "select[name='duration'], input[name='duration'], .duration-selector";
            var durationElement = await page.QuerySelectorAsync(durationSelector);
            
            if (durationElement != null)
            {
                await durationElement.SelectOptionAsync(_durationHours.ToString());
            }

            // Add justification if provided and field is available
            if (!string.IsNullOrEmpty(_justification))
            {
                var justificationSelector = "textarea[name='justification'], input[name='justification'], .justification-field";
                var justificationElement = await page.QuerySelectorAsync(justificationSelector);
                
                if (justificationElement != null)
                {
                    await justificationElement.FillAsync(_justification);
                }
                else
                {
                    _logger.LogWarning("Justification field not found, but justification was provided");
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Error filling activation details, continuing with defaults");
            // Continue - some fields might be optional
        }
    }

    private async Task SubmitActivationRequest(IPage page)
    {
        // Find and click the submit/activate button
        var submitButtonSelector = "button[type='submit'], text='Activate', text='Submit', .submit-button";
        var submitButton = await page.QuerySelectorAsync(submitButtonSelector);
        
        if (submitButton == null)
        {
            throw new InvalidOperationException("Submit button not found in activation form");
        }

        await submitButton.ClickAsync();

        // Wait for confirmation or success message
        var confirmationSelector = "text='Activation request submitted', text='Successfully activated', .success-message, .confirmation-message";
        
        try
        {
            await page.WaitForSelectorAsync(confirmationSelector, new() { Timeout = 30000 });
            _logger.LogDebug("Activation request submitted successfully");
        }
        catch (TimeoutException)
        {
            // Check if we're back to the main PIM page, which might indicate success
            var pimPageSelector = "[data-testid='pim-dashboard'], .pim-dashboard";
            var isPimPage = await page.QuerySelectorAsync(pimPageSelector) != null;
            
            if (!isPimPage)
            {
                throw new InvalidOperationException("Activation request submission could not be confirmed");
            }
            
            _logger.LogDebug("Returned to PIM dashboard, assuming activation request was submitted");
        }
    }
}
// This file was auto-generated by AI Test Generation
// Generated on: 2024-01-15 10:30:00 UTC
// Framework: Azure ML Workspace Test Automation
// 
// IMPORTANT: Review and implement any NotImplementedException methods before running tests
// 

using AzureMLWorkspace.Tests.Framework.Screenplay;
using AzureMLWorkspace.Tests.Framework.Abilities;
using Microsoft.Extensions.Logging;

namespace AzureMLWorkspace.Tests.Framework.Tasks.Generated;

/// <summary>
/// Task to deactivate a PIM (Privileged Identity Management) role
/// </summary>
public class DeactivatePIMRole : ITask
{
    private readonly ILogger<DeactivatePIMRole> _logger;
    private string _roleName = string.Empty;
    private string _resourceScope = string.Empty;
    private string _reason = string.Empty;

    /// <summary>
    /// The name of the task
    /// </summary>
    public string Name => $"Deactivate PIM role '{_roleName}' for resource '{_resourceScope}'";

    private DeactivatePIMRole(ILogger<DeactivatePIMRole> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Creates a PIM role deactivation task for the specified role
    /// </summary>
    /// <param name="roleName">Name of the role to deactivate</param>
    /// <returns>PIM role deactivation task instance</returns>
    public static DeactivatePIMRole WithRole(string roleName)
    {
        var logger = AzureMLWorkspace.Tests.Framework.Abilities.TestContext.ServiceProvider.GetRequiredService<ILogger<DeactivatePIMRole>>();
        return new DeactivatePIMRole(logger)
        {
            _roleName = roleName
        };
    }

    /// <summary>
    /// Specifies the resource scope for the role deactivation
    /// </summary>
    /// <param name="resourceScope">Resource scope (e.g., subscription, resource group)</param>
    /// <returns>PIM role deactivation task instance</returns>
    public DeactivatePIMRole ForResource(string resourceScope)
    {
        _resourceScope = resourceScope;
        return this;
    }

    /// <summary>
    /// Adds a reason for the role deactivation
    /// </summary>
    /// <param name="reason">Reason for deactivation</param>
    /// <returns>PIM role deactivation task instance</returns>
    public DeactivatePIMRole WithReason(string reason)
    {
        _reason = reason;
        return this;
    }

    /// <summary>
    /// Performs the PIM role deactivation task
    /// </summary>
    /// <param name="actor">The actor performing the task</param>
    public async Task PerformAs(IActor actor)
    {
        _logger.LogInformation("Actor {ActorName} attempting to deactivate PIM role {RoleName} for {ResourceScope}", 
            actor.Name, _roleName, _resourceScope);

        try
        {
            var browser = actor.Using<BrowseTheWeb>();
            var page = browser.Page;

            // Navigate to PIM if not already there
            await EnsureOnPIMPage(page);

            // Navigate to active assignments
            await NavigateToActiveAssignments(page);

            // Find and deactivate the role
            await DeactivateRole(page);

            _logger.LogInformation("Successfully deactivated PIM role {RoleName} for {ResourceScope}", _roleName, _resourceScope);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to deactivate PIM role {RoleName} for {ResourceScope}", _roleName, _resourceScope);
            throw new InvalidOperationException($"PIM role deactivation failed: {ex.Message}", ex);
        }
    }

    private async Task EnsureOnPIMPage(IPage page)
    {
        var currentUrl = page.Url;
        
        if (!currentUrl.Contains("privilegedidentitymanagement") && !currentUrl.Contains("pim"))
        {
            _logger.LogDebug("Navigating to PIM dashboard");
            
            await page.GotoAsync("https://portal.azure.com/#view/Microsoft_Azure_PIMCommon/CommonMenuBlade/~/quickStart", 
                new() { WaitUntil = WaitUntilState.NetworkIdle });
            
            await page.WaitForSelectorAsync("[data-testid='pim-dashboard'], .pim-dashboard, .ms-Nav-compositeLink", 
                new() { Timeout = 30000 });
        }
    }

    private async Task NavigateToActiveAssignments(IPage page)
    {
        try
        {
            // Look for "Active assignments" or "My roles" section
            var activeAssignmentsSelectors = new[]
            {
                "text='Active assignments'",
                "text='My roles'",
                "text='Active roles'",
                ".active-assignments",
                "[data-testid='active-assignments']"
            };

            foreach (var selector in activeAssignmentsSelectors)
            {
                var element = await page.QuerySelectorAsync(selector);
                if (element != null)
                {
                    await element.ClickAsync();
                    await page.WaitForSelectorAsync(".assignments-table, .roles-table, [data-testid='assignments-table']", 
                        new() { Timeout = 15000 });
                    return;
                }
            }

            _logger.LogWarning("Could not find active assignments section, staying on current page");
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Error navigating to active assignments section");
        }
    }

    private async Task DeactivateRole(IPage page)
    {
        try
        {
            // Find the specific role to deactivate
            var roleSelector = $"text='{_roleName}', [data-role-name='{_roleName}']";
            var roleElements = await page.QuerySelectorAllAsync(roleSelector);

            IElementHandle? targetRoleElement = null;

            // Find the role element that matches our resource scope
            foreach (var roleElement in roleElements)
            {
                var roleParentRow = await roleElement.QuerySelectorAsync("xpath=ancestor::tr | xpath=ancestor::.assignment-row");
                if (roleParentRow != null)
                {
                    var rowText = await roleParentRow.TextContentAsync();
                    if (string.IsNullOrEmpty(_resourceScope) || rowText?.Contains(_resourceScope) == true)
                    {
                        targetRoleElement = roleElement;
                        break;
                    }
                }
            }

            if (targetRoleElement == null)
            {
                throw new InvalidOperationException($"Active role '{_roleName}' not found for resource '{_resourceScope}'");
            }

            // Look for deactivate button near the role
            var parentRow = await targetRoleElement.QuerySelectorAsync("xpath=ancestor::tr | xpath=ancestor::.assignment-row");
            if (parentRow == null)
            {
                throw new InvalidOperationException($"Could not find parent row for role '{_roleName}'");
            }

            var deactivateButtonSelectors = new[]
            {
                "text='Deactivate'",
                "button[data-action='deactivate']",
                ".deactivate-button",
                "text='End assignment'"
            };

            IElementHandle? deactivateButton = null;
            foreach (var selector in deactivateButtonSelectors)
            {
                deactivateButton = await parentRow.QuerySelectorAsync(selector);
                if (deactivateButton != null)
                {
                    break;
                }
            }

            if (deactivateButton == null)
            {
                // Try clicking on the role itself to open a context menu or details panel
                await targetRoleElement.ClickAsync();
                
                // Wait for context menu or details panel
                await page.WaitForSelectorAsync(".context-menu, .details-panel, .role-actions", 
                    new() { Timeout = 10000 });
                
                // Look for deactivate button in the context menu
                foreach (var selector in deactivateButtonSelectors)
                {
                    deactivateButton = await page.QuerySelectorAsync(selector);
                    if (deactivateButton != null)
                    {
                        break;
                    }
                }
            }

            if (deactivateButton == null)
            {
                throw new InvalidOperationException($"Deactivate button not found for role '{_roleName}'");
            }

            await deactivateButton.ClickAsync();

            // Handle deactivation confirmation dialog if it appears
            await HandleDeactivationDialog(page);

            // Wait for confirmation or success message
            await WaitForDeactivationConfirmation(page);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error during role deactivation process");
            throw;
        }
    }

    private async Task HandleDeactivationDialog(IPage page)
    {
        try
        {
            // Wait for deactivation dialog to appear
            var dialogSelector = ".deactivation-dialog, .confirmation-dialog, [data-testid='deactivation-dialog']";
            var dialogElement = await page.QuerySelectorAsync(dialogSelector);
            
            if (dialogElement != null)
            {
                _logger.LogDebug("Deactivation dialog appeared");

                // Add reason if provided and field is available
                if (!string.IsNullOrEmpty(_reason))
                {
                    var reasonSelector = "textarea[name='reason'], input[name='reason'], .reason-field";
                    var reasonElement = await dialogElement.QuerySelectorAsync(reasonSelector);
                    
                    if (reasonElement != null)
                    {
                        await reasonElement.FillAsync(_reason);
                    }
                    else
                    {
                        _logger.LogWarning("Reason field not found, but reason was provided");
                    }
                }

                // Click confirm/deactivate button
                var confirmButtonSelector = "button[type='submit'], text='Confirm', text='Deactivate', .confirm-button";
                var confirmButton = await dialogElement.QuerySelectorAsync(confirmButtonSelector);
                
                if (confirmButton != null)
                {
                    await confirmButton.ClickAsync();
                }
                else
                {
                    throw new InvalidOperationException("Confirm button not found in deactivation dialog");
                }
            }
            else
            {
                _logger.LogDebug("No deactivation dialog appeared, proceeding");
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Error handling deactivation dialog");
            // Continue - dialog might be optional
        }
    }

    private async Task WaitForDeactivationConfirmation(IPage page)
    {
        try
        {
            // Wait for confirmation or success message
            var confirmationSelectors = new[]
            {
                "text='Role deactivated successfully'",
                "text='Deactivation successful'",
                "text='Assignment ended'",
                ".success-message",
                ".confirmation-message",
                "[data-testid='deactivation-success']"
            };

            var confirmationFound = false;
            foreach (var selector in confirmationSelectors)
            {
                try
                {
                    await page.WaitForSelectorAsync(selector, new() { Timeout = 15000 });
                    confirmationFound = true;
                    _logger.LogDebug("Found deactivation confirmation with selector: {Selector}", selector);
                    break;
                }
                catch (TimeoutException)
                {
                    // Continue to next selector
                }
            }

            if (!confirmationFound)
            {
                // Check if we're back to the main PIM page or assignments page
                var currentUrl = page.Url;
                if (currentUrl.Contains("privilegedidentitymanagement") || currentUrl.Contains("pim"))
                {
                    _logger.LogDebug("Returned to PIM page, assuming deactivation was successful");
                }
                else
                {
                    _logger.LogWarning("Could not confirm role deactivation");
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "Error waiting for deactivation confirmation");
        }
    }
}
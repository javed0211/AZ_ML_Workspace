// This file was auto-generated by AI Test Generation
// Generated on: 2024-01-15 10:30:00 UTC
// Framework: Azure ML Workspace Test Automation
// 
// IMPORTANT: Review and implement any NotImplementedException methods before running tests
// 

using Reqnroll;
using AzureMLWorkspace.Tests.Framework.Screenplay;
using AzureMLWorkspace.Tests.Framework.Tasks.Generated;
using AzureMLWorkspace.Tests.Framework.Questions.Generated;
using Microsoft.Extensions.Logging;

namespace AzureMLWorkspace.Tests.StepDefinitions.Generated;

[Binding]
public class AzurePIMRoleActivationSteps
{
    private readonly ILogger<AzurePIMRoleActivationSteps> _logger;
    private IActor? _actor;
    private string _activatedRole = string.Empty;
    private string _resourceScope = string.Empty;
    private string _justification = string.Empty;

    public AzurePIMRoleActivationSteps(ILogger<AzurePIMRoleActivationSteps> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    [Given(@"I am a user named ""(.*)""")]
    public void GivenIAmAUserNamed(string userName)
    {
        _logger.LogInformation("Creating actor: {UserName}", userName);
        var actorLogger = AzureMLWorkspace.Tests.Framework.Abilities.TestContext.ServiceProvider.GetRequiredService<ILogger<Actor>>();
        _actor = Actor.Named(userName, actorLogger);
    }

    [Given(@"I have access to Azure portal")]
    public async Task GivenIHaveAccessToAzurePortal()
    {
        if (_actor == null)
            throw new InvalidOperationException("Actor must be created first");

        _logger.LogInformation("Setting up Azure portal access for actor");
        
        // This would typically set up browser capabilities and authentication
        throw new NotImplementedException("Azure portal access setup needs implementation");
    }

    [When(@"I login to Azure portal")]
    public async Task WhenILoginToAzurePortal()
    {
        if (_actor == null)
            throw new InvalidOperationException("Actor must be created first");

        _logger.LogInformation("Actor attempting to login to Azure portal");
        await _actor.AttemptsTo(LoginToAzurePortal.WithDefaultCredentials());
    }

    [When(@"I navigate to PIM dashboard")]
    public async Task WhenINavigateToPIMDashboard()
    {
        if (_actor == null)
            throw new InvalidOperationException("Actor must be created first");

        _logger.LogInformation("Actor navigating to PIM dashboard");
        await _actor.AttemptsTo(NavigateToPIMDashboard.FromPortalHome());
    }

    [When(@"I activate the ""(.*)"" role for ""(.*)""")]
    public async Task WhenIActivateTheRoleFor(string roleName, string resourceScope)
    {
        if (_actor == null)
            throw new InvalidOperationException("Actor must be created first");

        _activatedRole = roleName;
        _resourceScope = resourceScope;

        _logger.LogInformation("Actor activating role {RoleName} for {ResourceScope}", roleName, resourceScope);
        await _actor.AttemptsTo(ActivatePIMRole.WithRole(roleName).ForResource(resourceScope));
    }

    [When(@"I activate the ""(.*)"" role for ""(.*)"" with justification ""(.*)""")]
    public async Task WhenIActivateTheRoleForWithJustification(string roleName, string resourceScope, string justification)
    {
        if (_actor == null)
            throw new InvalidOperationException("Actor must be created first");

        _activatedRole = roleName;
        _resourceScope = resourceScope;
        _justification = justification;

        _logger.LogInformation("Actor activating role {RoleName} for {ResourceScope} with justification: {Justification}", 
            roleName, resourceScope, justification);
        
        await _actor.AttemptsTo(ActivatePIMRole.WithRole(roleName)
            .ForResource(resourceScope)
            .WithJustification(justification));
    }

    [Then(@"I should see the role activation request submitted")]
    public async Task ThenIShouldSeeTheRoleActivationRequestSubmitted()
    {
        if (_actor == null)
            throw new InvalidOperationException("Actor must be created first");

        _logger.LogInformation("Verifying role activation request submission");
        
        var isRequestSubmitted = await _actor.AsksFor(IsPIMRoleActivationRequestSubmitted.ForRole(_activatedRole));
        
        if (!isRequestSubmitted)
        {
            throw new AssertionException($"Role activation request for {_activatedRole} was not submitted successfully");
        }
    }

    [Then(@"I should receive confirmation of role activation")]
    public async Task ThenIShouldReceiveConfirmationOfRoleActivation()
    {
        if (_actor == null)
            throw new InvalidOperationException("Actor must be created first");

        _logger.LogInformation("Verifying role activation confirmation");
        
        var isActivated = await _actor.AsksFor(IsPIMRoleActivated.ForRole(_activatedRole).InResource(_resourceScope));
        
        if (!isActivated)
        {
            throw new AssertionException($"Role {_activatedRole} was not activated successfully for {_resourceScope}");
        }
    }

    [Then(@"I should have elevated permissions for the specified duration")]
    public async Task ThenIShouldHaveElevatedPermissionsForTheSpecifiedDuration()
    {
        if (_actor == null)
            throw new InvalidOperationException("Actor must be created first");

        _logger.LogInformation("Verifying elevated permissions");
        
        var hasElevatedPermissions = await _actor.AsksFor(HasElevatedPermissions.ForRole(_activatedRole).InResource(_resourceScope));
        
        if (!hasElevatedPermissions)
        {
            throw new AssertionException($"Elevated permissions for {_activatedRole} in {_resourceScope} are not available");
        }
    }

    [Then(@"I should see the role activation request submitted with justification")]
    public async Task ThenIShouldSeeTheRoleActivationRequestSubmittedWithJustification()
    {
        if (_actor == null)
            throw new InvalidOperationException("Actor must be created first");

        _logger.LogInformation("Verifying role activation request with justification");
        
        var requestDetails = await _actor.AsksFor(GetPIMRoleActivationRequestDetails.ForRole(_activatedRole));
        
        if (requestDetails == null || string.IsNullOrEmpty(requestDetails.Justification) || !requestDetails.Justification.Contains(_justification))
        {
            throw new AssertionException($"Role activation request does not contain the expected justification: {_justification}");
        }
    }

    [Then(@"the activation should be logged with the provided justification")]
    public async Task ThenTheActivationShouldBeLoggedWithTheProvidedJustification()
    {
        if (_actor == null)
            throw new InvalidOperationException("Actor must be created first");

        _logger.LogInformation("Verifying activation logging with justification");
        
        var auditLog = await _actor.AsksFor(GetPIMActivationAuditLog.ForRole(_activatedRole).WithJustification(_justification));
        
        if (auditLog == null || !auditLog.Any())
        {
            throw new AssertionException($"PIM activation audit log not found for role {_activatedRole} with justification {_justification}");
        }
    }

    [AfterScenario]
    public async Task CleanupAfterScenario()
    {
        if (_actor != null)
        {
            try
            {
                // Deactivate any activated roles
                if (!string.IsNullOrEmpty(_activatedRole))
                {
                    _logger.LogInformation("Cleaning up: Deactivating role {RoleName}", _activatedRole);
                    await _actor.AttemptsTo(DeactivatePIMRole.WithRole(_activatedRole).ForResource(_resourceScope));
                }

                // Dispose the actor
                if (_actor is IAsyncDisposable disposableActor)
                {
                    await disposableActor.DisposeAsync();
                }
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Error during scenario cleanup");
            }
            finally
            {
                _actor = null;
                _activatedRole = string.Empty;
                _resourceScope = string.Empty;
                _justification = string.Empty;
            }
        }
    }
}
// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PlaywrightFramework.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("API Testing Examples")]
    [NUnit.Framework.CategoryAttribute("api")]
    [NUnit.Framework.CategoryAttribute("baseUrl:https://jsonplaceholder.typicode.com")]
    public partial class APITestingExamplesFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "api",
                "baseUrl:https://jsonplaceholder.typicode.com"};
        
#line 1 "ApiTesting.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "API Testing Examples", ("    As a QA engineer\n    I want to test REST APIs using BDD scenarios\n    So that" +
                    " I can ensure API functionality works correctly"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
    await testRunner.GivenAsync("I set header \"Content-Type\" to \"application/json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.AndAsync("I set header \"Accept\" to \"application/json\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get a single post")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("get")]
        public async System.Threading.Tasks.Task GetASinglePost()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "get"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get a single post", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 13
    await testRunner.WhenAsync("I send a GET request to \"/posts/1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 15
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
    await testRunner.AndAsync("the response should contain \"userId\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.AndAsync("the response should contain \"title\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.AndAsync("the JSON response should have field \"$.id\" with value \"1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
    await testRunner.AndAsync("the JSON response should have field \"$.userId\" of type \"number\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
    await testRunner.AndAsync("the JSON response should have field \"$.title\" of type \"string\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
    await testRunner.AndAsync("the response time should be less than 5000 milliseconds", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get posts with pagination")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("get")]
        [NUnit.Framework.CategoryAttribute("pagination")]
        public async System.Threading.Tasks.Task GetPostsWithPagination()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "get",
                    "pagination"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get posts with pagination", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Parameter",
                            "Value"});
                table1.AddRow(new string[] {
                            "_page",
                            "1"});
                table1.AddRow(new string[] {
                            "_limit",
                            "5"});
#line 25
    await testRunner.WhenAsync("I send a GET request to \"/posts\" with query parameters:", ((string)(null)), table1, "When ");
#line hidden
#line 29
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 30
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
    await testRunner.AndAsync("the response should contain \"userId\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new post")]
        [NUnit.Framework.CategoryAttribute("crud")]
        [NUnit.Framework.CategoryAttribute("post")]
        public async System.Threading.Tasks.Task CreateANewPost()
        {
            string[] tagsOfScenario = new string[] {
                    "crud",
                    "post"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a new post", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 35
    await testRunner.WhenAsync("I send a POST request to \"/posts\" with body:", ("{\n    \"title\": \"Test Post from BDD\",\n    \"body\": \"This is a test post created via" +
                        " BDD scenario\",\n    \"userId\": 1\n}"), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 44
    await testRunner.AndAsync("the response status code should be 201", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
    await testRunner.AndAsync("the JSON response should have field \"$.title\" with value \"Test Post from BDD\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
    await testRunner.AndAsync(("the JSON response should have field \"$.body\" with value \"This is a test post crea" +
                        "ted via BDD scenario\""), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
    await testRunner.AndAsync("the JSON response should have field \"$.userId\" with value \"1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update an existing post")]
        [NUnit.Framework.CategoryAttribute("crud")]
        [NUnit.Framework.CategoryAttribute("put")]
        public async System.Threading.Tasks.Task UpdateAnExistingPost()
        {
            string[] tagsOfScenario = new string[] {
                    "crud",
                    "put"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update an existing post", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 51
    await testRunner.WhenAsync("I send a PUT request to \"/posts/1\" with body:", ("{\n    \"id\": 1,\n    \"title\": \"Updated Post Title\",\n    \"body\": \"This post has been" +
                        " updated via BDD scenario\",\n    \"userId\": 1\n}"), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 60
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 61
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 62
    await testRunner.AndAsync("the JSON response should have field \"$.title\" with value \"Updated Post Title\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 63
    await testRunner.AndAsync(("the JSON response should have field \"$.body\" with value \"This post has been updat" +
                        "ed via BDD scenario\""), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partially update a post")]
        [NUnit.Framework.CategoryAttribute("crud")]
        [NUnit.Framework.CategoryAttribute("patch")]
        public async System.Threading.Tasks.Task PartiallyUpdateAPost()
        {
            string[] tagsOfScenario = new string[] {
                    "crud",
                    "patch"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Partially update a post", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 67
    await testRunner.WhenAsync("I send a PATCH request to \"/posts/1\" with body:", "{\n    \"title\": \"Partially Updated Title\"\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 73
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 74
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
    await testRunner.AndAsync(("the JSON response should have field \"$.title\" with value \"Partially Updated Title" +
                        "\""), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a post")]
        [NUnit.Framework.CategoryAttribute("crud")]
        [NUnit.Framework.CategoryAttribute("delete")]
        public async System.Threading.Tasks.Task DeleteAPost()
        {
            string[] tagsOfScenario = new string[] {
                    "crud",
                    "delete"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Delete a post", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 79
    await testRunner.WhenAsync("I send a DELETE request to \"/posts/1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 80
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 81
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("API call with Bearer token authentication")]
        [NUnit.Framework.CategoryAttribute("authentication")]
        [NUnit.Framework.CategoryAttribute("bearer")]
        public async System.Threading.Tasks.Task APICallWithBearerTokenAuthentication()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "bearer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("API call with Bearer token authentication", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 85
    await testRunner.GivenAsync("I set the bearer token to \"test-bearer-token-12345\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 86
    await testRunner.WhenAsync("I send a GET request to \"/posts/1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 87
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 88
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("API call with Basic authentication")]
        [NUnit.Framework.CategoryAttribute("authentication")]
        [NUnit.Framework.CategoryAttribute("basic")]
        public async System.Threading.Tasks.Task APICallWithBasicAuthentication()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "basic"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("API call with Basic authentication", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 92
    await testRunner.GivenAsync("I set basic authentication with username \"testuser\" and password \"testpass\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 93
    await testRunner.WhenAsync("I send a GET request to \"/posts/1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 94
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 95
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("API call with API key authentication")]
        [NUnit.Framework.CategoryAttribute("authentication")]
        [NUnit.Framework.CategoryAttribute("apikey")]
        public async System.Threading.Tasks.Task APICallWithAPIKeyAuthentication()
        {
            string[] tagsOfScenario = new string[] {
                    "authentication",
                    "apikey"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("API call with API key authentication", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 99
    await testRunner.GivenAsync("I set API key \"X-API-Key\" to \"my-secret-api-key\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 100
    await testRunner.WhenAsync("I send a GET request to \"/posts/1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 101
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 102
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate response headers")]
        [NUnit.Framework.CategoryAttribute("validation")]
        [NUnit.Framework.CategoryAttribute("headers")]
        public async System.Threading.Tasks.Task ValidateResponseHeaders()
        {
            string[] tagsOfScenario = new string[] {
                    "validation",
                    "headers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate response headers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 105
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 106
    await testRunner.WhenAsync("I send a GET request to \"/posts/1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 107
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 108
    await testRunner.AndAsync("the response should contain header \"Content-Type\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 109
    await testRunner.AndAsync("the response header \"Content-Type\" should be \"application/json; charset=utf-8\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate response content patterns")]
        [NUnit.Framework.CategoryAttribute("validation")]
        [NUnit.Framework.CategoryAttribute("content")]
        public async System.Threading.Tasks.Task ValidateResponseContentPatterns()
        {
            string[] tagsOfScenario = new string[] {
                    "validation",
                    "content"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate response content patterns", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 113
    await testRunner.WhenAsync("I send a GET request to \"/posts/1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 114
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 115
    await testRunner.AndAsync("the response should contain \"sunt aut facere\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 116
    await testRunner.AndAsync("the response should match pattern \"\\\"id\\\":\\s*1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Use stored variables in API calls")]
        [NUnit.Framework.CategoryAttribute("datadriven")]
        [NUnit.Framework.CategoryAttribute("variables")]
        public async System.Threading.Tasks.Task UseStoredVariablesInAPICalls()
        {
            string[] tagsOfScenario = new string[] {
                    "datadriven",
                    "variables"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Use stored variables in API calls", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 120
    await testRunner.GivenAsync("I store the value \"1\" as \"postId\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 121
    await testRunner.WhenAsync("I send a GET request to \"/posts/{postId}\" using stored variable \"postId\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 122
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 123
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 124
    await testRunner.AndAsync("I store the response field \"$.userId\" as \"authorId\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 125
    await testRunner.WhenAsync("I send a GET request to \"/users/{authorId}\" using stored variable \"authorId\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 126
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 127
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Complete CRUD operations flow")]
        [NUnit.Framework.CategoryAttribute("crud")]
        [NUnit.Framework.CategoryAttribute("complete-flow")]
        public async System.Threading.Tasks.Task CompleteCRUDOperationsFlow()
        {
            string[] tagsOfScenario = new string[] {
                    "crud",
                    "complete-flow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Complete CRUD operations flow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 132
    await testRunner.WhenAsync("I send a POST request to \"/posts\" with body:", ("{\n    \"title\": \"BDD Test Post\",\n    \"body\": \"This post will be used for CRUD test" +
                        "ing\",\n    \"userId\": 1\n}"), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 140
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 141
    await testRunner.AndAsync("the response status code should be 201", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 142
    await testRunner.AndAsync("I store the response field \"$.id\" as \"newPostId\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 145
    await testRunner.WhenAsync("I send a GET request to \"/posts/{newPostId}\" using stored variable \"newPostId\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 146
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 147
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 148
    await testRunner.AndAsync("the JSON response should have field \"$.title\" with value \"BDD Test Post\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 151
    await testRunner.WhenAsync(("I send a PUT request to \"/posts/{newPostId}\" using stored variable \"newPostId\" wi" +
                        "th body:"), ("{\n    \"id\": {newPostId},\n    \"title\": \"Updated BDD Test Post\",\n    \"body\": \"This " +
                        "post has been updated during CRUD testing\",\n    \"userId\": 1\n}"), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 160
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 161
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 164
    await testRunner.WhenAsync("I send a DELETE request to \"/posts/{newPostId}\" using stored variable \"newPostId\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 165
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 166
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Performance testing - Response time validation")]
        [NUnit.Framework.CategoryAttribute("performance")]
        [NUnit.Framework.CategoryAttribute("load")]
        public async System.Threading.Tasks.Task PerformanceTesting_ResponseTimeValidation()
        {
            string[] tagsOfScenario = new string[] {
                    "performance",
                    "load"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Performance testing - Response time validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 169
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 170
    await testRunner.WhenAsync("I send a GET request to \"/posts\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 171
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 172
    await testRunner.AndAsync("the response time should be less than 2000 milliseconds", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Handle 404 errors gracefully")]
        [NUnit.Framework.CategoryAttribute("error-handling")]
        [NUnit.Framework.CategoryAttribute("404")]
        public async System.Threading.Tasks.Task Handle404ErrorsGracefully()
        {
            string[] tagsOfScenario = new string[] {
                    "error-handling",
                    "404"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle 404 errors gracefully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 175
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 176
    await testRunner.WhenAsync("I send a GET request to \"/posts/999999\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 177
    await testRunner.ThenAsync("the response status code should be 404", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Work with nested JSON data")]
        [NUnit.Framework.CategoryAttribute("complex")]
        [NUnit.Framework.CategoryAttribute("nested-data")]
        public async System.Threading.Tasks.Task WorkWithNestedJSONData()
        {
            string[] tagsOfScenario = new string[] {
                    "complex",
                    "nested-data"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Work with nested JSON data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 180
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 181
    await testRunner.WhenAsync("I send a GET request to \"/users/1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 182
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 183
    await testRunner.AndAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 184
    await testRunner.AndAsync("the JSON response should have field \"$.address.city\" of type \"string\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 185
    await testRunner.AndAsync("the JSON response should have field \"$.company.name\" of type \"string\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 186
    await testRunner.AndAsync("the response should contain \"address\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 187
    await testRunner.AndAsync("the response should contain \"company\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

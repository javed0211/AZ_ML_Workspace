// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PlaywrightFramework.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Azure AI Search Service Integration")]
    public partial class AzureAISearchServiceIntegrationFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "AzureAISearchIntegration.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Azure AI Search Service Integration", ("    As a data scientist\n    I want to use Azure AI Search to index and search doc" +
                    "uments\n    So that I can find relevant information quickly using semantic search"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
#line 7
    await testRunner.GivenAsync("I am a data scientist named \"Javed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
    await testRunner.AndAsync("I have access to Azure AI Search service", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new search index")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("search")]
        public async System.Threading.Tasks.Task CreateANewSearchIndex()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "search"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a new search index", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "FieldName",
                            "Type",
                            "Searchable",
                            "Filterable",
                            "Sortable"});
                table3.AddRow(new string[] {
                            "id",
                            "Edm.String",
                            "false",
                            "false",
                            "false"});
                table3.AddRow(new string[] {
                            "title",
                            "Edm.String",
                            "true",
                            "true",
                            "true"});
                table3.AddRow(new string[] {
                            "content",
                            "Edm.String",
                            "true",
                            "false",
                            "false"});
                table3.AddRow(new string[] {
                            "category",
                            "Edm.String",
                            "false",
                            "true",
                            "true"});
                table3.AddRow(new string[] {
                            "createdDate",
                            "Edm.DateTimeOffset",
                            "false",
                            "true",
                            "true"});
#line 12
    await testRunner.WhenAsync("I create a search index named \"documents-index\" with the following fields:", ((string)(null)), table3, "When ");
#line hidden
#line 19
    await testRunner.ThenAsync("the search index should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 20
    await testRunner.AndAsync("the index should have 5 fields", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upload documents to search index")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("search")]
        public async System.Threading.Tasks.Task UploadDocumentsToSearchIndex()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "search"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Upload documents to search index", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 24
    await testRunner.GivenAsync("I have a search index named \"documents-index\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "id",
                            "title",
                            "content",
                            "category",
                            "createdDate"});
                table4.AddRow(new string[] {
                            "1",
                            "Machine Learning Basics",
                            "Introduction to ML algorithms and concepts",
                            "ML",
                            "2024-01-15T10:00:00Z"});
                table4.AddRow(new string[] {
                            "2",
                            "Deep Learning Guide",
                            "Neural networks and deep learning techniques",
                            "ML",
                            "2024-01-16T10:00:00Z"});
                table4.AddRow(new string[] {
                            "3",
                            "Climate Data Analysis",
                            "Analyzing temperature and precipitation data",
                            "Climate",
                            "2024-01-17T10:00:00Z"});
#line 25
    await testRunner.WhenAsync("I upload the following documents to the index:", ((string)(null)), table4, "When ");
#line hidden
#line 30
    await testRunner.ThenAsync("the documents should be indexed successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 31
    await testRunner.AndAsync("the index should contain 3 documents", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Perform simple text search")]
        [NUnit.Framework.CategoryAttribute("search")]
        [NUnit.Framework.CategoryAttribute("query")]
        public async System.Threading.Tasks.Task PerformSimpleTextSearch()
        {
            string[] tagsOfScenario = new string[] {
                    "search",
                    "query"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Perform simple text search", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 35
    await testRunner.GivenAsync("I have a search index named \"documents-index\" with documents", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 36
    await testRunner.WhenAsync("I search for \"machine learning\" in the index", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
    await testRunner.ThenAsync("I should receive search results", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 38
    await testRunner.AndAsync("the results should contain at least 1 document", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
    await testRunner.AndAsync("the top result should have a relevance score greater than 0.5", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search with filters")]
        [NUnit.Framework.CategoryAttribute("search")]
        [NUnit.Framework.CategoryAttribute("query")]
        public async System.Threading.Tasks.Task SearchWithFilters()
        {
            string[] tagsOfScenario = new string[] {
                    "search",
                    "query"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search with filters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 43
    await testRunner.GivenAsync("I have a search index named \"documents-index\" with documents", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "FilterField",
                            "Operator",
                            "Value"});
                table5.AddRow(new string[] {
                            "category",
                            "eq",
                            "ML"});
#line 44
    await testRunner.WhenAsync("I search for \"*\" with the following filters:", ((string)(null)), table5, "When ");
#line hidden
#line 47
    await testRunner.ThenAsync("I should receive search results", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 48
    await testRunner.AndAsync("all results should have category \"ML\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
    await testRunner.AndAsync("the results should contain at least 1 document", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search with facets")]
        [NUnit.Framework.CategoryAttribute("search")]
        [NUnit.Framework.CategoryAttribute("query")]
        public async System.Threading.Tasks.Task SearchWithFacets()
        {
            string[] tagsOfScenario = new string[] {
                    "search",
                    "query"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search with facets", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 53
    await testRunner.GivenAsync("I have a search index named \"documents-index\" with documents", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 54
    await testRunner.WhenAsync("I search for \"*\" with facets on \"category\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
    await testRunner.ThenAsync("I should receive search results with facets", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 56
    await testRunner.AndAsync("the facets should include \"category\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
    await testRunner.AndAsync("the facet \"category\" should have at least 1 value", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Perform semantic search with ranking")]
        [NUnit.Framework.CategoryAttribute("search")]
        [NUnit.Framework.CategoryAttribute("semantic")]
        public async System.Threading.Tasks.Task PerformSemanticSearchWithRanking()
        {
            string[] tagsOfScenario = new string[] {
                    "search",
                    "semantic"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Perform semantic search with ranking", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 61
    await testRunner.GivenAsync("I have a search index named \"documents-index\" with semantic configuration", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 62
    await testRunner.WhenAsync("I perform a semantic search for \"how to build neural networks\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 63
    await testRunner.ThenAsync("I should receive semantically ranked results", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 64
    await testRunner.AndAsync("the results should include semantic captions", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
    await testRunner.AndAsync("the top result should be relevant to neural networks", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get autocomplete suggestions")]
        [NUnit.Framework.CategoryAttribute("search")]
        [NUnit.Framework.CategoryAttribute("autocomplete")]
        public async System.Threading.Tasks.Task GetAutocompleteSuggestions()
        {
            string[] tagsOfScenario = new string[] {
                    "search",
                    "autocomplete"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get autocomplete suggestions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 69
    await testRunner.GivenAsync("I have a search index named \"documents-index\" with suggester configured", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 70
    await testRunner.WhenAsync("I request autocomplete suggestions for \"mach\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 71
    await testRunner.ThenAsync("I should receive autocomplete suggestions", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 72
    await testRunner.AndAsync("the suggestions should include \"machine\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search performance test")]
        [NUnit.Framework.CategoryAttribute("search")]
        [NUnit.Framework.CategoryAttribute("performance")]
        public async System.Threading.Tasks.Task SearchPerformanceTest()
        {
            string[] tagsOfScenario = new string[] {
                    "search",
                    "performance"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search performance test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 76
    await testRunner.GivenAsync("I have a search index named \"documents-index\" with 100 documents", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 77
    await testRunner.WhenAsync("I perform 10 concurrent searches for \"data analysis\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 78
    await testRunner.ThenAsync("all searches should complete within 5 seconds", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 79
    await testRunner.AndAsync("all searches should return results", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete documents from index")]
        [NUnit.Framework.CategoryAttribute("search")]
        [NUnit.Framework.CategoryAttribute("delete")]
        public async System.Threading.Tasks.Task DeleteDocumentsFromIndex()
        {
            string[] tagsOfScenario = new string[] {
                    "search",
                    "delete"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Delete documents from index", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 83
    await testRunner.GivenAsync("I have a search index named \"documents-index\" with documents", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 84
    await testRunner.WhenAsync("I delete document with id \"1\" from the index", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 85
    await testRunner.ThenAsync("the document should be removed successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 86
    await testRunner.AndAsync("the index should not contain document with id \"1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete search index")]
        [NUnit.Framework.CategoryAttribute("search")]
        [NUnit.Framework.CategoryAttribute("cleanup")]
        public async System.Threading.Tasks.Task DeleteSearchIndex()
        {
            string[] tagsOfScenario = new string[] {
                    "search",
                    "cleanup"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Delete search index", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 90
    await testRunner.GivenAsync("I have a search index named \"documents-index\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 91
    await testRunner.WhenAsync("I delete the search index", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 92
    await testRunner.ThenAsync("the search index should be deleted successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 93
    await testRunner.AndAsync("the index should not exist", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search different content types")]
        [NUnit.Framework.TestCaseAttribute("machine learning", "1", "2", null)]
        [NUnit.Framework.TestCaseAttribute("climate", "1", "2", null)]
        [NUnit.Framework.TestCaseAttribute("data analysis", "1", "2", null)]
        [NUnit.Framework.TestCaseAttribute("neural networks", "1", "2", null)]
        public async System.Threading.Tasks.Task SearchDifferentContentTypes(string searchTerm, string minResults, string maxSeconds, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("SearchTerm", searchTerm);
            argumentsOfScenario.Add("MinResults", minResults);
            argumentsOfScenario.Add("MaxSeconds", maxSeconds);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search different content types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 96
    await testRunner.GivenAsync("I have a search index named \"documents-index\" with documents", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 97
    await testRunner.WhenAsync(string.Format("I search for \"{0}\" in the index", searchTerm), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 98
    await testRunner.ThenAsync("I should receive search results", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 99
    await testRunner.AndAsync(string.Format("the results should contain at least {0} documents", minResults), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 100
    await testRunner.AndAsync(string.Format("the search should complete within {0} seconds", maxSeconds), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

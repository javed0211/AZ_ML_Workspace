// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PlaywrightFramework.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Azure Document Intelligence Service Integration")]
    public partial class AzureDocumentIntelligenceServiceIntegrationFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "AzureDocumentIntelligence.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Azure Document Intelligence Service Integration", ("    As a data scientist\n    I want to use Azure Document Intelligence to extract " +
                    "information from documents\n    So that I can automate document processing and da" +
                    "ta extraction"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
#line 7
    await testRunner.GivenAsync("I am a data scientist named \"Javed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
    await testRunner.AndAsync("I have access to Azure Document Intelligence service", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Analyze a prebuilt invoice document")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("document")]
        public async System.Threading.Tasks.Task AnalyzeAPrebuiltInvoiceDocument()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "document"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Analyze a prebuilt invoice document", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 12
    await testRunner.GivenAsync("I have an invoice document at \"test-data/sample-invoice.pdf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 13
    await testRunner.WhenAsync("I analyze the document using the prebuilt invoice model", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
    await testRunner.ThenAsync("the analysis should complete successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 15
    await testRunner.AndAsync("the result should contain invoice fields", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
    await testRunner.AndAsync("the invoice should have a vendor name", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.AndAsync("the invoice should have a total amount", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.AndAsync("the confidence score should be greater than 0.7", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Analyze a receipt document")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("document")]
        public async System.Threading.Tasks.Task AnalyzeAReceiptDocument()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "document"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Analyze a receipt document", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 22
    await testRunner.GivenAsync("I have a receipt document at \"test-data/sample-receipt.jpg\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 23
    await testRunner.WhenAsync("I analyze the document using the prebuilt receipt model", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
    await testRunner.ThenAsync("the analysis should complete successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 25
    await testRunner.AndAsync("the result should contain receipt fields", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
    await testRunner.AndAsync("the receipt should have merchant information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
    await testRunner.AndAsync("the receipt should have transaction date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
    await testRunner.AndAsync("the receipt should have total amount", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Extract information from ID document")]
        [NUnit.Framework.CategoryAttribute("document")]
        [NUnit.Framework.CategoryAttribute("id")]
        public async System.Threading.Tasks.Task ExtractInformationFromIDDocument()
        {
            string[] tagsOfScenario = new string[] {
                    "document",
                    "id"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Extract information from ID document", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 32
    await testRunner.GivenAsync("I have an ID document at \"test-data/sample-id.png\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 33
    await testRunner.WhenAsync("I analyze the document using the prebuilt ID model", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
    await testRunner.ThenAsync("the analysis should complete successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 35
    await testRunner.AndAsync("the result should contain ID fields", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
    await testRunner.AndAsync("the ID should have first name", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
    await testRunner.AndAsync("the ID should have last name", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
    await testRunner.AndAsync("the ID should have date of birth", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
    await testRunner.AndAsync("the ID should have document number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Extract layout and structure from document")]
        [NUnit.Framework.CategoryAttribute("document")]
        [NUnit.Framework.CategoryAttribute("layout")]
        public async System.Threading.Tasks.Task ExtractLayoutAndStructureFromDocument()
        {
            string[] tagsOfScenario = new string[] {
                    "document",
                    "layout"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Extract layout and structure from document", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 43
    await testRunner.GivenAsync("I have a document at \"test-data/sample-document.pdf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 44
    await testRunner.WhenAsync("I analyze the document layout", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 45
    await testRunner.ThenAsync("the analysis should complete successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 46
    await testRunner.AndAsync("the result should contain pages", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
    await testRunner.AndAsync("the result should contain text lines", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
    await testRunner.AndAsync("the result should contain tables if present", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
    await testRunner.AndAsync("the result should contain selection marks if present", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Train a custom document model")]
        [NUnit.Framework.CategoryAttribute("document")]
        [NUnit.Framework.CategoryAttribute("custom")]
        public async System.Threading.Tasks.Task TrainACustomDocumentModel()
        {
            string[] tagsOfScenario = new string[] {
                    "document",
                    "custom"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Train a custom document model", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 53
    await testRunner.GivenAsync("I have training documents in storage container \"training-data\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 54
    await testRunner.WhenAsync("I train a custom model named \"custom-form-model\" with the training data", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
    await testRunner.ThenAsync("the model training should complete successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 56
    await testRunner.AndAsync("the model should have a model ID", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
    await testRunner.AndAsync("the model should be ready for use", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
    await testRunner.AndAsync("the model accuracy should be greater than 0.8", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Analyze document with custom model")]
        [NUnit.Framework.CategoryAttribute("document")]
        [NUnit.Framework.CategoryAttribute("custom")]
        public async System.Threading.Tasks.Task AnalyzeDocumentWithCustomModel()
        {
            string[] tagsOfScenario = new string[] {
                    "document",
                    "custom"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Analyze document with custom model", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 62
    await testRunner.GivenAsync("I have a custom model named \"custom-form-model\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 63
    await testRunner.AndAsync("I have a document at \"test-data/custom-form.pdf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
    await testRunner.WhenAsync("I analyze the document using the custom model", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 65
    await testRunner.ThenAsync("the analysis should complete successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 66
    await testRunner.AndAsync("the result should contain custom fields", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 67
    await testRunner.AndAsync("all custom fields should have confidence scores", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch process multiple documents")]
        [NUnit.Framework.CategoryAttribute("document")]
        [NUnit.Framework.CategoryAttribute("batch")]
        public async System.Threading.Tasks.Task BatchProcessMultipleDocuments()
        {
            string[] tagsOfScenario = new string[] {
                    "document",
                    "batch"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Batch process multiple documents", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table40 = new global::Reqnroll.Table(new string[] {
                            "FileName",
                            "Type"});
                table40.AddRow(new string[] {
                            "invoice-001.pdf",
                            "invoice"});
                table40.AddRow(new string[] {
                            "invoice-002.pdf",
                            "invoice"});
                table40.AddRow(new string[] {
                            "receipt-001.jpg",
                            "receipt"});
#line 71
    await testRunner.GivenAsync("I have multiple documents in folder \"test-data/batch\":", ((string)(null)), table40, "Given ");
#line hidden
#line 76
    await testRunner.WhenAsync("I batch process all documents with appropriate models", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 77
    await testRunner.ThenAsync("all documents should be processed successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 78
    await testRunner.AndAsync("each result should contain extracted fields", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 79
    await testRunner.AndAsync("the batch processing should complete within 30 seconds", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Extract tables from document")]
        [NUnit.Framework.CategoryAttribute("document")]
        [NUnit.Framework.CategoryAttribute("table")]
        public async System.Threading.Tasks.Task ExtractTablesFromDocument()
        {
            string[] tagsOfScenario = new string[] {
                    "document",
                    "table"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Extract tables from document", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 83
    await testRunner.GivenAsync("I have a document with tables at \"test-data/document-with-tables.pdf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 84
    await testRunner.WhenAsync("I analyze the document layout", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 85
    await testRunner.ThenAsync("the analysis should complete successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 86
    await testRunner.AndAsync("the result should contain at least 1 table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 87
    await testRunner.AndAsync("each table should have rows and columns", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 88
    await testRunner.AndAsync("table cells should contain text content", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create composed model from multiple models")]
        [NUnit.Framework.CategoryAttribute("document")]
        [NUnit.Framework.CategoryAttribute("compose")]
        public async System.Threading.Tasks.Task CreateComposedModelFromMultipleModels()
        {
            string[] tagsOfScenario = new string[] {
                    "document",
                    "compose"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create composed model from multiple models", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table41 = new global::Reqnroll.Table(new string[] {
                            "ModelName",
                            "Description"});
                table41.AddRow(new string[] {
                            "invoice-model",
                            "Invoice extraction"});
                table41.AddRow(new string[] {
                            "receipt-model",
                            "Receipt extraction"});
#line 92
    await testRunner.GivenAsync("I have trained custom models:", ((string)(null)), table41, "Given ");
#line hidden
#line 96
    await testRunner.WhenAsync("I compose a new model named \"financial-docs-model\" from these models", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 97
    await testRunner.ThenAsync("the composed model should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 98
    await testRunner.AndAsync("the composed model should have a model ID", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 99
    await testRunner.AndAsync("the composed model should support both invoice and receipt documents", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Document analysis performance test")]
        [NUnit.Framework.CategoryAttribute("document")]
        [NUnit.Framework.CategoryAttribute("performance")]
        public async System.Threading.Tasks.Task DocumentAnalysisPerformanceTest()
        {
            string[] tagsOfScenario = new string[] {
                    "document",
                    "performance"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Document analysis performance test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 103
    await testRunner.GivenAsync("I have 10 documents in folder \"test-data/performance\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 104
    await testRunner.WhenAsync("I analyze all documents concurrently using prebuilt models", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 105
    await testRunner.ThenAsync("all analyses should complete within 60 seconds", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 106
    await testRunner.AndAsync("all analyses should return results", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 107
    await testRunner.AndAsync("the average processing time per document should be less than 10 seconds", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate extracted data quality")]
        [NUnit.Framework.CategoryAttribute("document")]
        [NUnit.Framework.CategoryAttribute("validation")]
        public async System.Threading.Tasks.Task ValidateExtractedDataQuality()
        {
            string[] tagsOfScenario = new string[] {
                    "document",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate extracted data quality", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 111
    await testRunner.GivenAsync("I have an invoice document at \"test-data/sample-invoice.pdf\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 112
    await testRunner.WhenAsync("I analyze the document using the prebuilt invoice model", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 113
    await testRunner.ThenAsync("the analysis should complete successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table42 = new global::Reqnroll.Table(new string[] {
                            "FieldName"});
                table42.AddRow(new string[] {
                            "VendorName"});
                table42.AddRow(new string[] {
                            "InvoiceDate"});
                table42.AddRow(new string[] {
                            "InvoiceTotal"});
                table42.AddRow(new string[] {
                            "CustomerName"});
#line 114
    await testRunner.AndAsync("all required fields should be present:", ((string)(null)), table42, "And ");
#line hidden
#line 120
    await testRunner.AndAsync("all field confidence scores should be greater than 0.6", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Handle unsupported document format")]
        [NUnit.Framework.CategoryAttribute("document")]
        [NUnit.Framework.CategoryAttribute("error")]
        public async System.Threading.Tasks.Task HandleUnsupportedDocumentFormat()
        {
            string[] tagsOfScenario = new string[] {
                    "document",
                    "error"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle unsupported document format", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 124
    await testRunner.GivenAsync("I have a document at \"test-data/unsupported.txt\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 125
    await testRunner.WhenAsync("I attempt to analyze the document using the prebuilt invoice model", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 126
    await testRunner.ThenAsync("the analysis should fail with appropriate error", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 127
    await testRunner.AndAsync("the error message should indicate unsupported format", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Analyze different document types")]
        [NUnit.Framework.TestCaseAttribute("test-data/invoice-sample.pdf", "invoice", "0.7", null)]
        [NUnit.Framework.TestCaseAttribute("test-data/receipt-sample.jpg", "receipt", "0.7", null)]
        [NUnit.Framework.TestCaseAttribute("test-data/id-sample.png", "ID", "0.8", null)]
        [NUnit.Framework.TestCaseAttribute("test-data/business-card.jpg", "businessCard", "0.7", null)]
        public async System.Threading.Tasks.Task AnalyzeDifferentDocumentTypes(string documentPath, string modelType, string minConfidence, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DocumentPath", documentPath);
            argumentsOfScenario.Add("ModelType", modelType);
            argumentsOfScenario.Add("MinConfidence", minConfidence);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Analyze different document types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 130
    await testRunner.GivenAsync(string.Format("I have a document at \"{0}\"", documentPath), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 131
    await testRunner.WhenAsync(string.Format("I analyze the document using the prebuilt {0} model", modelType), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 132
    await testRunner.ThenAsync("the analysis should complete successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 133
    await testRunner.AndAsync(string.Format("the result should contain {0} fields", modelType), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 134
    await testRunner.AndAsync(string.Format("the confidence score should be greater than {0}", minConfidence), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

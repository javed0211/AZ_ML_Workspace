AZURE ML WORKSPACE TESTING FRAMEWORK - POWERPOINT CONTENT
================================================================

SLIDE 1: TITLE SLIDE
====================
Title: Azure ML Workspace Testing Framework
Subtitle: A Comprehensive C# Playwright-based Test Automation Solution

Bullet Points:
• Technology Stack: .NET 8.0, Playwright, Reqnroll BDD
• Target Audience: Data Scientists, DevOps Engineers, QA Teams
• Purpose: Automated Azure ML workspace testing and validation
• Architecture: Screenplay pattern with layered design

Key Benefits:
• Reduces manual testing effort by 80%
• Ensures consistent ML environment validation
• Automated role-based access testing
• Comprehensive reporting and traceability

SLIDE 2: FRAMEWORK ARCHITECTURE
===============================
Title: Framework Architecture Overview
Subtitle: Layered Architecture Design

Architecture Diagram (Text Format):
┌─────────────────────────────────────────────────────────────┐
│                    Presentation Layer                       │
│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────┐ │
│  │   BDD Features  │  │  Step Definitions│  │  Test Runner│ │
│  │   (Gherkin)     │  │   (Reqnroll)    │  │   (NUnit)   │ │
│  └─────────────────┘  └─────────────────┘  └─────────────┘ │
└─────────────────────────────────────────────────────────────┘
                                │
┌─────────────────────────────────────────────────────────────┐
│                   Business Logic Layer                     │
│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────┐ │
│  │     Actors      │  │      Tasks      │  │  Questions  │ │
│  │  (Screenplay)   │  │   (Actions)     │  │ (Assertions)│ │
│  └─────────────────┘  └─────────────────┘  └─────────────┘ │
└─────────────────────────────────────────────────────────────┘

Core Principles:
• Separation of Concerns
• Dependency Inversion
• Single Responsibility
• Screenplay Pattern

SLIDE 3: CORE COMPONENTS
========================
Title: Core Framework Components
Subtitle: The Screenplay Pattern Implementation

Four Main Components:

1. ACTORS (Who performs actions)
   • Data Scientists
   • ML Engineers
   • Administrators

2. ABILITIES (What actors can do)
   • UseAzureML
   • UsePIMRoleManagement
   • BrowseTheWeb
   • UseAzureAISearch

3. TASKS (High-level business actions)
   • OpenWorkspace
   • StartCompute
   • ActivatePIMRole
   • StartVSCodeDesktop

4. QUESTIONS (System state queries)
   • Validate.ComputeStatus()
   • IsPIMRoleActivated()
   • ApplicationLinksEnabled()
   • VSCodeInteractivity()

Sample Code:
var dataScientist = Actor.Named("Alice", logger)
    .Can(UseAzureML.AsContributor())
    .Can(BrowseTheWeb.Using(browser));

await dataScientist
    .AttemptsTo(OpenWorkspace.Named("ml-workspace"))
    .And(StartCompute.Named("test-compute"))
    .Should(Validate.ComputeStatus("test-compute", "Running"));

SLIDE 4: KEY CAPABILITIES
=========================
Title: Key Framework Capabilities
Subtitle: What Can the Framework Test?

ML WORKSPACE MANAGEMENT:
• Workspace access and navigation
• Compute instance lifecycle (start/stop/restart)
• Notebook creation and execution
• Dataset and model management

SECURITY & ACCESS CONTROL:
• PIM role activation/deactivation
• Authentication and authorization flows
• Resource access validation
• Session management

DOCUMENT PROCESSING:
• PDF text extraction
• Image OCR processing
• Document classification
• Key phrase extraction and summarization

DEVELOPMENT ENVIRONMENT:
• VS Code Desktop integration
• Jupyter notebook testing
• Python script execution
• Environment configuration validation

SLIDE 5: SAMPLE TEST SCENARIOS
==============================
Title: Sample Test Scenarios
Subtitle: Real-World Usage Examples

SCENARIO 1: Basic Workspace Access
Feature: Azure ML Workspace Management
    As a data scientist
    I want to manage Azure ML workspaces
    So that I can perform machine learning tasks

Scenario: Access Azure ML Workspace
    Given I am a data scientist named "Javed"
    And I have activated the Data Scientist PIM role
    When I attempt to open workspace "ml-workspace"
    Then I should be able to access the workspace
    And the workspace should be available

SCENARIO 2: Compute Management
Scenario: Start Compute Instance
    Given I have opened workspace "ml-workspace"
    When I start compute instance "test-compute"
    Then the compute instance should be running
    And I should be able to connect to it

SCENARIO 3: VS Code Integration
Scenario: Azure ML Workspace with VS Code Desktop Integration
    When I go to workspace "ml-workspace"
    And I select Workspace "CTO-workspace"
    And I choose compute option
    And I open compute "com-jk"
    Then I check if application link are enabled
    When I start VS code Desktop
    Then I check if I am able to interact with VS code

SLIDE 6: PIM ROLE MANAGEMENT
============================
Title: PIM Role Management
Subtitle: Automated Privileged Access Management

KEY FEATURES:
• Automatic role activation before tests
• Role deactivation after test completion
• Support for multiple Azure roles
• Audit trail and compliance reporting

SAMPLE IMPLEMENTATION:
// Activate PIM role programmatically
var pimAbility = UsePIMRoleManagement
    .WithTenantAndSubscription(tenantId, subscriptionId);

await actor
    .Can(pimAbility)
    .AttemptsTo(ActivatePIMRole
        .WithRole("PIM_UKIN_CTAO_AI_PLATFORM_DEV_DATA_SCIENTIST")
        .WithJustification("Automated testing")
        .ForDuration(8)); // hours

SUPPORTED ROLES:
• Data Scientist
• ML Engineer
• Workspace Contributor
• Workspace Reader

SLIDE 7: TEST DATA & CONFIGURATION
==================================
Title: Test Data & Configuration
Subtitle: Sample Data and Configuration Files

TEST DATA STRUCTURE:
test-data/
├── azure-ml-config.json      # Azure ML workspace configuration
├── sample-dataset.csv        # Sample ML dataset
├── sample-notebook.ipynb     # Jupyter notebook for testing
├── sample-python-script.py   # Python script examples
├── requirements.txt          # Python dependencies
└── vscode-settings.json      # VS Code configuration

CONFIGURATION EXAMPLE:
{
  "BaseUrl": "https://ml.azure.com",
  "Azure": {
    "SubscriptionId": "your-subscription-id",
    "ResourceGroup": "your-resource-group",
    "WorkspaceName": "your-workspace-name",
    "TenantId": "your-tenant-id"
  },
  "Playwright": {
    "HeadlessMode": false,
    "BrowserType": "chromium",
    "DefaultTimeout": 30000,
    "CaptureScreenshots": true,
    "CaptureVideos": false
  }
}

SLIDE 8: SAMPLE NOTEBOOK CONTENT
================================
Title: Sample Notebook Content
Subtitle: ML Workflow Testing Example

SAMPLE JUPYTER NOTEBOOK FEATURES:
# Azure ML workspace connection
ws = Workspace.from_config()
print(f"Connected to workspace: {ws.name}")

# Sample data generation
data = {
    'feature1': np.random.normal(0, 1, 1000),
    'feature2': np.random.normal(2, 1.5, 1000),
    'feature3': np.random.exponential(1, 1000),
    'target': np.random.choice([0, 1], 1000, p=[0.6, 0.4])
}

# Machine learning model training
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.4f}")

WHAT THE FRAMEWORK TESTS:
✅ Notebook execution without errors
✅ Data processing capabilities
✅ Model training and evaluation
✅ Visualization generation
✅ Azure ML SDK integration
✅ Performance metrics validation

SLIDE 9: USAGE GUIDE
====================
Title: Framework Usage Guide
Subtitle: How to Get Started

1. PREREQUISITES SETUP:
   • Install .NET 8.0 SDK
   • Install Visual Studio 2022 or VS Code
   • Azure subscription with ML workspace access
   • PIM role assignments configured

2. PROJECT SETUP:
   # Clone repository
   git clone [repository-url]
   
   # Restore packages
   dotnet restore
   
   # Install Playwright browsers
   pwsh bin/Debug/net9.0/playwright.ps1 install

3. CONFIGURATION:
   • Update appsettings.json with your Azure details
   • Create appsettings.test.json for local overrides
   • Set environment variables for sensitive data

4. RUN TESTS:
   # Run all tests
   dotnet test
   
   # Run specific categories
   dotnet test --filter Category=WorkspaceManagement
   dotnet test --filter Category=Security
   dotnet test --filter Category=DocumentProcessing

SLIDE 10: TEST EXECUTION EXAMPLES
=================================
Title: Test Execution Examples
Subtitle: Running Different Test Categories

TEST CATEGORIES:

DOCUMENT PROCESSING TESTS:
Command: dotnet test --filter Category=DocumentProcessing
Tests: PDF extraction, OCR, classification, search functionality

WORKSPACE MANAGEMENT TESTS:
Command: dotnet test --filter Category=WorkspaceManagement
Tests: Access validation, compute lifecycle, navigation flows

SECURITY TESTS:
Command: dotnet test --filter Category=Security
Tests: Authentication, authorization, PIM roles, session management

INTEGRATION TESTS:
Command: dotnet test --filter Category=Integration
Tests: End-to-end workflows, multi-service integration

BROWSER-SPECIFIC TESTING:
# Test with different browsers
dotnet test -- Playwright.BrowserName=chromium
dotnet test -- Playwright.BrowserName=firefox
dotnet test -- Playwright.BrowserName=webkit

SLIDE 11: REPORTING & MONITORING
================================
Title: Reporting & Monitoring
Subtitle: Comprehensive Test Reporting

BUILT-IN REPORTING FEATURES:
• Screenshots: Automatic capture on test failures
• Video Recording: Full test execution recording
• Trace Files: Detailed execution traces for debugging
• Logs: Comprehensive logging with Serilog
• Test Results: NUnit and Allure report generation

SAMPLE TEST REPORT STRUCTURE:
TestResults/
├── Screenshots/
│   ├── failed-test-001.png
│   └── failed-test-002.png
├── Videos/
│   ├── test-execution-001.webm
│   └── test-execution-002.webm
├── Traces/
│   ├── trace-001.zip
│   └── trace-002.zip
└── Reports/
    ├── TestResults.xml
    ├── allure-results/
    └── extent-reports/

MONITORING CAPABILITIES:
• Real-time test execution monitoring
• Performance metrics collection
• Error pattern analysis
• Trend reporting over time

SLIDE 12: ADVANCED FEATURES
===========================
Title: Advanced Features
Subtitle: Enterprise-Grade Capabilities

PARALLEL EXECUTION:
• Multi-browser testing (Chrome, Firefox, Safari)
• Concurrent test execution
• Resource optimization
• Scalable test runs

CI/CD INTEGRATION EXAMPLE:
# Azure DevOps Pipeline Example
- task: DotNetCoreCLI@2
  displayName: 'Run Tests'
  inputs:
    command: 'test'
    projects: '**/*Tests.csproj'
    arguments: '--configuration Release --logger trx'

ENTERPRISE FEATURES:
• Security: Secure credential management, audit trails
• Cross-Platform: Windows, macOS, Linux, Docker support
• Cloud Ready: Azure DevOps, GitHub Actions integration
• Extensible: Plugin architecture, custom abilities

SLIDE 13: GETTING STARTED CHECKLIST
===================================
Title: Getting Started Checklist
Subtitle: Your Implementation Roadmap

PHASE 1: SETUP (Week 1)
☐ Install prerequisites (.NET 8.0, VS 2022)
☐ Clone framework repository
☐ Configure Azure ML workspace access
☐ Set up PIM role assignments
☐ Run sample tests to verify setup

PHASE 2: CONFIGURATION (Week 2)
☐ Customize configuration files
☐ Set up environment-specific settings
☐ Configure CI/CD pipeline integration
☐ Establish test data management
☐ Set up reporting and monitoring

PHASE 3: TEST DEVELOPMENT (Week 3-4)
☐ Create custom test scenarios
☐ Implement business-specific validations
☐ Develop reusable test components
☐ Establish test maintenance procedures
☐ Train team members on framework usage

SLIDE 14: RESOURCES & SUPPORT
=============================
Title: Resources & Support
Subtitle: Documentation and Getting Help

DOCUMENTATION RESOURCES:
• Architecture Guide: /docs/ARCHITECTURE_DOCUMENTATION.md
• User Guide: /docs/USER_GUIDE.md
• API Documentation: /docs/API_DOCUMENTATION.md
• Quick Reference: /docs/QUICK_REFERENCE.md
• PIM Setup Guide: /AzureMLWorkspace.Tests/README-PIM-Setup.md

KEY FILES AND EXAMPLES:
• Sample Configuration: /test-data/azure-ml-config.json
• Sample Notebook: /test-data/sample-notebook.ipynb
• Feature Files: /AzureMLWorkspace.Tests/Features/
• Test Examples: /AzureMLWorkspace.Tests/Tests/

TROUBLESHOOTING COMMON ISSUES:
• Browser Issues: Run playwright.ps1 install
• Auth Failures: Check credentials and permissions
• Timeouts: Increase timeout values in config
• PIM Issues: Verify role assignments and permissions

SLIDE 15: THANK YOU
===================
Title: Thank You!
Subtitle: Azure ML Workspace Testing Framework

READY TO TRANSFORM YOUR ML TESTING WORKFLOW?

This comprehensive framework provides everything you need for automated Azure ML workspace testing, from basic functionality validation to complex end-to-end scenarios.

KEY TAKEAWAYS:
✅ Comprehensive test automation solution
✅ Role-based access management
✅ Extensive reporting and monitoring
✅ Enterprise-ready scalability
✅ Easy setup and maintenance
✅ BDD-driven development approach

NEXT STEPS:
• Schedule framework setup session
• Provide access to documentation and resources
• Plan pilot implementation timeline
• Establish ongoing support and maintenance

QUESTIONS & DISCUSSION:
Let's discuss your specific testing requirements and how this framework can be customized for your needs.

================================================================
END OF POWERPOINT CONTENT
================================================================